V// source: js/app/viewmodels/terminal.js\u000a$(function() {\u000a    function TerminalViewModel(parameters) {\u000a        var self = this;\u000a\u000a        self.loginState = parameters[0];\u000a        self.settings = parameters[1];\u000a\u000a        self.tabActive = false;\u000a        self.previousScroll = undefined;\u000a\u000a        self.log = ko.observableArray([]);\u000a        self.log.extend({ throttle: 500 });\u000a        self.plainLogLines = ko.observableArray([]);\u000a        self.plainLogLines.extend({ throttle: 500 });\u000a\u000a        self.buffer = ko.observable(300);\u000a        self.upperLimit = ko.observable(1499);\u000a\u000a        self.command = ko.observable(undefined);\u000a\u000a        self.isErrorOrClosed = ko.observable(undefined);\u000a        self.isOperational = ko.observable(undefined);\u000a        self.isPrinting = ko.observable(undefined);\u000a        self.isPaused = ko.observable(undefined);\u000a        self.isError = ko.observable(undefined);\u000a        self.isReady = ko.observable(undefined);\u000a        self.isLoading = ko.observable(undefined);\u000a\u000a        self.autoscrollEnabled = ko.observable(true);\u000a\u000a        self.filters = self.settings.terminalFilters;\u000a        self.filterRegex = ko.observable();\u000a\u000a        self.cmdHistory = [];\u000a        self.cmdHistoryIdx = -1;\u000a\u000a        self.enableFancyFunctionality = ko.observable(true);\u000a        self.disableTerminalLogDuringPrinting = ko.observable(false);\u000a\u000a        self.acceptableFancyTime = 500;\u000a        self.acceptableUnfancyTime = 300;\u000a        self.reenableTimeout = 5000;\u000a\u000a        self.forceFancyFunctionality = ko.observable(false);\u000a        self.forceTerminalLogDuringPrinting = ko.observable(false);\u000a\u000a        self.fancyFunctionality = ko.pureComputed(function() {\u000a            return self.enableFancyFunctionality() || self.forceFancyFunctionality();\u000a        });\u000a        self.terminalLogDuringPrinting = ko.pureComputed(function() {\u000a            return !self.disableTerminalLogDuringPrinting() || self.forceTerminalLogDuringPrinting();\u000a        });\u000a\u000a        self.displayedLines = ko.pureComputed(function() {\u000a            if (!self.enableFancyFunctionality()) {\u000a                return self.log();\u000a            }\u000a\u000a            var regex = self.filterRegex();\u000a            var lineVisible = function(entry) {\u000a                return regex == undefined || !entry.line.match(regex);\u000a            };\u000a\u000a            var filtered = false;\u000a            var result = [];\u000a            var lines = self.log();\u000a            _.each(lines, function(entry) {\u000a                if (lineVisible(entry)) {\u000a                    result.push(entry);\u000a                    filtered = false;\u000a                } else if (!filtered) {\u000a                    result.push(self._toInternalFormat("[...]", "filtered"));\u000a                    filtered = true;\u000a                }\u000a            });\u000a\u000a            return result;\u000a        });\u000a\u000a        self.plainLogOutput = ko.pureComputed(function() {\u000a            if (self.fancyFunctionality()) {\u000a                return;\u000a            }\u000a            return self.plainLogLines().join("\u005cn");\u000a        });\u000a\u000a        self.lineCount = ko.pureComputed(function() {\u000a            if (!self.fancyFunctionality()) {\u000a                return;\u000a            }\u000a\u000a            var regex = self.filterRegex();\u000a            var lineVisible = function(entry) {\u000a                return regex == undefined || !entry.line.match(regex);\u000a            };\u000a\u000a            var lines = self.log();\u000a            var total = lines.length;\u000a            var displayed = _.filter(lines, lineVisible).length;\u000a            var filtered = total - displayed;\u000a\u000a            if (filtered > 0) {\u000a                if (total > self.upperLimit()) {\u000a                    return _.sprintf(gettext("showing %(displayed)d lines (%(filtered)d of %(total)d total lines filtered, buffer full)"), {displayed: displayed, total: total, filtered: filtered});\u000a                } else {\u000a                    return _.sprintf(gettext("showing %(displayed)d lines (%(filtered)d of %(total)d total lines filtered)"), {displayed: displayed, total: total, filtered: filtered});\u000a                }\u000a            } else {\u000a                if (total > self.upperLimit()) {\u000a                    return _.sprintf(gettext("showing %(displayed)d lines (buffer full)"), {displayed: displayed});\u000a                } else {\u000a                    return _.sprintf(gettext("showing %(displayed)d lines"), {displayed: displayed});\u000a                }\u000a            }\u000a        });\u000a\u000a        self.autoscrollEnabled.subscribe(function(newValue) {\u000a            if (newValue) {\u000a                self.log(self.log.slice(-self.buffer()));\u000a            }\u000a        });\u000a\u000a        self.activeFilters = ko.observableArray([]);\u000a        self.activeFilters.subscribe(function(e) {\u000a            self.updateFilterRegex();\u000a        });\u000a\u000a        self.blacklist=[];\u000a        self.settings.feature_autoUppercaseBlacklist.subscribe(function(newValue) {\u000a            self.blacklist = splitTextToArray(newValue, ",", true);\u000a        });\u000a\u000a        self._reenableFancyTimer = undefined;\u000a        self._reenableUnfancyTimer = undefined;\u000a        self._disableFancy = function(difference) {\u000a            log.warn("Terminal: Detected slow client (needed " + difference + "ms for processing new log data), disabling fancy terminal functionality");\u000a            if (self._reenableFancyTimer) {\u000a                window.clearTimeout(self._reenableFancyTimer);\u000a                self._reenableFancyTimer = undefined;\u000a            }\u000a            self.enableFancyFunctionality(false);\u000a        };\u000a        self._reenableFancy = function(difference) {\u000a            if (self._reenableFancyTimer) return;\u000a            self._reenableFancyTimer = window.setTimeout(function() {\u000a                log.info("Terminal: Client speed recovered, enabling fancy terminal functionality");\u000a                self.enableFancyFunctionality(true);\u000a            }, self.reenableTimeout);\u000a        };\u000a        self._disableUnfancy = function(difference) {\u000a            log.warn("Terminal: Detected very slow client (needed " + difference + "ms for processing new log data), completely disabling terminal output during printing");\u000a            if (self._reenableUnfancyTimer) {\u000a                window.clearTimeout(self._reenableUnfancyTimer);\u000a                self._reenableUnfancyTimer = undefined;\u000a            }\u000a            self.disableTerminalLogDuringPrinting(true);\u000a        };\u000a        self._reenableUnfancy = function() {\u000a            if (self._reenableUnfancyTimer) return;\u000a            self._reenableUnfancyTimer = window.setTimeout(function() {\u000a                log.info("Terminal: Client speed recovered, enabling terminal output during printing");\u000a                self.disableTerminalLogDuringPrinting(false);\u000a            }, self.reenableTimeout);\u000a        };\u000a\u000a        self.fromCurrentData = function(data) {\u000a            self._processStateData(data.state);\u000a\u000a            var start = new Date().getTime();\u000a            self._processCurrentLogData(data.logs);\u000a            var end = new Date().getTime();\u000a            var difference = end - start;\u000a\u000a            if (self.enableFancyFunctionality()) {\u000a                // fancy enabled -> check if we need to disable fancy\u000a                if (difference >= self.acceptableFancyTime) {\u000a                    self._disableFancy(difference);\u000a                }\u000a            } else if (!self.disableTerminalLogDuringPrinting()) {\u000a                // fancy disabled, unfancy not -> check if we need to disable unfancy or re-enable fancy\u000a                if (difference >= self.acceptableUnfancyTime) {\u000a                    self._disableUnfancy(difference);\u000a                } else if (difference < self.acceptableFancyTime / 2.0) {\u000a                    self._reenableFancy(difference);\u000a                }\u000a            } else {\u000a                // fancy & unfancy disabled -> check if we need to re-enable unfancy\u000a                if (difference < self.acceptableUnfancyTime / 2.0) {\u000a                    self._reenableUnfancy(difference);\u000a                }\u000a            }\u000a        };\u000a\u000a        self.fromHistoryData = function(data) {\u000a            self._processStateData(data.state);\u000a            self._processHistoryLogData(data.logs);\u000a        };\u000a\u000a        self._processCurrentLogData = function(data) {\u000a            var length = self.log().length;\u000a            if (length >= self.upperLimit()) {\u000a                return;\u000a            }\u000a\u000a            if (!self.terminalLogDuringPrinting() && self.isPrinting()) {\u000a                var last = self.plainLogLines()[self.plainLogLines().length - 1];\u000a                var disabled = "--- client too slow, log output disabled while printing ---";\u000a                if (last != disabled) {\u000a                    self.plainLogLines.push(disabled);\u000a                }\u000a                return;\u000a            }\u000a\u000a            var newData = (data.length + length > self.upperLimit())\u000a                ? data.slice(0, self.upperLimit() - length)\u000a                : data;\u000a            if (!newData) {\u000a                return;\u000a            }\u000a\u000a            if (!self.fancyFunctionality()) {\u000a                // lite version of the terminal - text output only\u000a                self.plainLogLines(self.plainLogLines().concat(newData).slice(-self.buffer()));\u000a                self.updateOutput();\u000a                return;\u000a            }\u000a\u000a            var newLog = self.log().concat(_.map(newData, function(line) { return self._toInternalFormat(line) }));\u000a            if (newData.length != data.length) {\u000a                var cutoff = "--- too many lines to buffer, cut off ---";\u000a                newLog.push(self._toInternalFormat(cutoff, "cut"));\u000a            }\u000a\u000a            if (self.autoscrollEnabled()) {\u000a                // we only keep the last <buffer> entries\u000a                newLog = newLog.slice(-self.buffer());\u000a            }\u000a            self.log(newLog);\u000a            self.updateOutput();\u000a        };\u000a\u000a        self._processHistoryLogData = function(data) {\u000a            self.plainLogLines(data);\u000a            self.log(_.map(data, function(line) { return self._toInternalFormat(line) }));\u000a            self.updateOutput();\u000a        };\u000a\u000a        self._toInternalFormat = function(line, type) {\u000a            if (type == undefined) {\u000a                type = "line";\u000a            }\u000a            return {line: escapeUnprintableCharacters(line), type: type}\u000a        };\u000a\u000a        self._processStateData = function(data) {\u000a            self.isErrorOrClosed(data.flags.closedOrError);\u000a            self.isOperational(data.flags.operational);\u000a            self.isPaused(data.flags.paused);\u000a            self.isPrinting(data.flags.printing);\u000a            self.isError(data.flags.error);\u000a            self.isReady(data.flags.ready);\u000a            self.isLoading(data.flags.loading);\u000a        };\u000a\u000a        self.updateFilterRegex = function() {\u000a            var filterRegexStr = self.activeFilters().join("|").trim();\u000a            if (filterRegexStr == "") {\u000a                self.filterRegex(undefined);\u000a            } else {\u000a                self.filterRegex(new RegExp(filterRegexStr));\u000a            }\u000a            self.updateOutput();\u000a        };\u000a\u000a        self.updateOutput = function() {\u000a            if (self.tabActive && OctoPrint.coreui.browserTabVisible && self.autoscrollEnabled()) {\u000a                self.scrollToEnd();\u000a            }\u000a        };\u000a\u000a        self.terminalScrollEvent = _.throttle(function () {\u000a            var container = self.fancyFunctionality() ? $("#terminal-output") : $("#terminal-output-lowfi");\u000a            var pos = container.scrollTop();\u000a            var scrollingUp = self.previousScroll !== undefined && pos < self.previousScroll;\u000a\u000a            if (self.autoscrollEnabled() && scrollingUp) {\u000a                var maxScroll = container[0].scrollHeight - container[0].offsetHeight;\u000a\u000a                if (pos <= maxScroll ) {\u000a                    self.autoscrollEnabled(false);\u000a                }\u000a            }\u000a\u000a            self.previousScroll = pos;\u000a        }, 250);\u000a\u000a        self.gotoTerminalCommand = function() {\u000a            // skip if user highlights text.\u000a            var sel = getSelection().toString();\u000a            if (sel) {\u000a                return;\u000a            }\u000a\u000a            $("#terminal-command").focus();\u000a        };\u000a\u000a        self.toggleAutoscroll = function() {\u000a            self.autoscrollEnabled(!self.autoscrollEnabled());\u000a\u000a            if (self.autoscrollEnabled()) {\u000a                self.updateOutput();\u000a            }\u000a        };\u000a\u000a        self.selectAll = function() {\u000a            var container = self.fancyFunctionality() ? $("#terminal-output") : $("#terminal-output-lowfi");\u000a            if (container.length) {\u000a                container.selectText();\u000a            }\u000a        };\u000a\u000a        self.scrollToEnd = function() {\u000a            var container = self.fancyFunctionality() ? $("#terminal-output") : $("#terminal-output-lowfi");\u000a            if (container.length) {\u000a                container.scrollTop(container[0].scrollHeight);\u000a            }\u000a        };\u000a\u000a        self.copyAll = function() {\u000a            var lines;\u000a\u000a            if (self.fancyFunctionality()) {\u000a                lines = _.map(self.log(), "line");\u000a            } else {\u000a                lines = self.plainLogLines();\u000a            }\u000a\u000a            copyToClipboard(lines.join("\u005cn"));\u000a        };\u000a\u000a        self.clearAllLogs = function() {\u000a            self.log([]);\u000a            self.plainLogLines([]);            \u000a        };\u000a        // command matching regex\u000a        // (Example output for inputs G0, G1, G28.1, M117 test)\u000a        // - 1: code including optional subcode. Example: G0, G1, G28.1, M117\u000a        // - 2: main code only. Example: G0, G1, G28, M117\u000a        // - 3: sub code, if available. Example: undefined, undefined, .1, undefined\u000a        // - 4: command parameters incl. leading whitespace, if any. Example: "", "", "", " test"\u000a        var commandRe = /^(([gmt][0-9]+)(\u005c.[0-9+])?)(\u005cs.*)?/i;\u000a\u000a        self.sendCommand = function() {\u000a            var command = self.command();\u000a            if (!command) {\u000a                return;\u000a            }\u000a\u000a            var commandToSend = command;\u000a            var commandMatch = commandToSend.match(commandRe);\u000a            if (commandMatch !== null) {\u000a                var fullCode = commandMatch[1].toUpperCase(); // full code incl. sub code\u000a                var mainCode = commandMatch[2].toUpperCase(); // main code only without sub code\u000a\u000a                if (self.blacklist.indexOf(mainCode) < 0 && self.blacklist.indexOf(fullCode) < 0) {\u000a                    // full or main code not on blacklist -> upper case the whole command\u000a                    commandToSend = commandToSend.toUpperCase();\u000a                } else {\u000a                    // full or main code on blacklist -> only upper case that and leave parameters as is\u000a                    commandToSend = fullCode + (commandMatch[4] !== undefined ? commandMatch[4] : "");\u000a                }\u000a            }\u000a\u000a            if (commandToSend) {\u000a                OctoPrint.control.sendGcode(commandToSend)\u000a                    .done(function() {\u000a                        self.cmdHistory.push(command);\u000a                        self.cmdHistory.slice(-300); // just to set a sane limit to how many manually entered commands will be saved...\u000a                        self.cmdHistoryIdx = self.cmdHistory.length;\u000a                        self.command("");\u000a                    });\u000a            }\u000a        };\u000a\u000a        self.fakeAck = function() {\u000a            OctoPrint.connection.fakeAck();\u000a        };\u000a\u000a        self.handleKeyDown = function(event) {\u000a            var keyCode = event.keyCode;\u000a\u000a            if (keyCode == 38 || keyCode == 40) {\u000a                if (keyCode == 38 && self.cmdHistory.length > 0 && self.cmdHistoryIdx > 0) {\u000a                    self.cmdHistoryIdx--;\u000a                } else if (keyCode == 40 && self.cmdHistoryIdx < self.cmdHistory.length - 1) {\u000a                    self.cmdHistoryIdx++;\u000a                }\u000a\u000a                if (self.cmdHistoryIdx >= 0 && self.cmdHistoryIdx < self.cmdHistory.length) {\u000a                    self.command(self.cmdHistory[self.cmdHistoryIdx]);\u000a                }\u000a\u000a                // prevent the cursor from being moved to the beginning of the input field (this is actually the reason\u000a                // why we do the arrow key handling in the keydown event handler, keyup would be too late already to\u000a                // prevent this from happening, causing a jumpy cursor)\u000a                return false;\u000a            }\u000a\u000a            // do not prevent default action\u000a            return true;\u000a        };\u000a\u000a        self.handleKeyUp = function(event) {\u000a            if (event.keyCode == 13) {\u000a                self.sendCommand();\u000a            }\u000a\u000a            // do not prevent default action\u000a            return true;\u000a        };\u000a\u000a        self.onAfterTabChange = function(current, previous) {\u000a            self.tabActive = current == "#term";\u000a            self.updateOutput();\u000a        };\u000a\u000a        self.onBrowserTabVisibilityChange = function(status) {\u000a            self.updateOutput();\u000a        };\u000a\u000a    }\u000a\u000a    OCTOPRINT_VIEWMODELS.push({\u000a        construct: TerminalViewModel,\u000a        dependencies: ["loginStateViewModel", "settingsViewModel"],\u000a        elements: ["#term"]\u000a    });\u000a});\u000a\u000a;\u000a
p0
.