V// source: js/app/viewmodels/printerstate.js\u000a$(function() {\u000a    function PrinterStateViewModel(parameters) {\u000a        var self = this;\u000a\u000a        self.loginState = parameters[0];\u000a        self.settings = parameters[1];\u000a\u000a        self.stateString = ko.observable(undefined);\u000a        self.isErrorOrClosed = ko.observable(undefined);\u000a        self.isOperational = ko.observable(undefined);\u000a        self.isPrinting = ko.observable(undefined);\u000a        self.isCancelling = ko.observable(undefined);\u000a        self.isPausing = ko.observable(undefined);\u000a        self.isPaused = ko.observable(undefined);\u000a        self.isError = ko.observable(undefined);\u000a        self.isReady = ko.observable(undefined);\u000a        self.isLoading = ko.observable(undefined);\u000a        self.isSdReady = ko.observable(undefined);\u000a\u000a        self.enablePrint = ko.pureComputed(function() {\u000a            return self.isOperational() && self.isReady() && !self.isPrinting() && !self.isCancelling() && !self.isPausing() && self.loginState.isUser() && self.filename();\u000a        });\u000a        self.enablePause = ko.pureComputed(function() {\u000a            return self.isOperational() && (self.isPrinting() || self.isPaused()) && !self.isCancelling() && !self.isPausing() && self.loginState.isUser();\u000a        });\u000a        self.enableCancel = ko.pureComputed(function() {\u000a            return self.isOperational() && (self.isPrinting() || self.isPaused()) && !self.isCancelling() && !self.isPausing() && self.loginState.isUser();\u000a        });\u000a\u000a        self.filename = ko.observable(undefined);\u000a        self.filepath = ko.observable(undefined);\u000a        self.filedisplay = ko.observable(undefined);\u000a        self.filesize = ko.observable(undefined);\u000a        self.filepos = ko.observable(undefined);\u000a        self.filedate = ko.observable(undefined);\u000a        self.progress = ko.observable(undefined);\u000a        self.printTime = ko.observable(undefined);\u000a        self.printTimeLeft = ko.observable(undefined);\u000a        self.printTimeLeftOrigin = ko.observable(undefined);\u000a        self.sd = ko.observable(undefined);\u000a        self.timelapse = ko.observable(undefined);\u000a        self.user = ko.observable(undefined);\u000a\u000a        self.busyFiles = ko.observableArray([]);\u000a\u000a        self.filament = ko.observableArray([]);\u000a        self.estimatedPrintTime = ko.observable(undefined);\u000a        self.lastPrintTime = ko.observable(undefined);\u000a\u000a        self.currentHeight = ko.observable(undefined);\u000a\u000a        self.TITLE_PRINT_BUTTON_PAUSED = gettext("Restarts the print job from the beginning");\u000a        self.TITLE_PRINT_BUTTON_UNPAUSED = gettext("Starts the print job");\u000a        self.TITLE_PAUSE_BUTTON_PAUSED = gettext("Resumes the print job");\u000a        self.TITLE_PAUSE_BUTTON_UNPAUSED = gettext("Pauses the print job");\u000a\u000a        self.titlePrintButton = ko.observable(self.TITLE_PRINT_BUTTON_UNPAUSED);\u000a        self.titlePauseButton = ko.observable(self.TITLE_PAUSE_BUTTON_UNPAUSED);\u000a\u000a        var estimatedPrintTimeStringHlpr = function (fmt) {\u000a            if (self.lastPrintTime())\u000a                return fmt(self.lastPrintTime());\u000a            if (self.estimatedPrintTime())\u000a                return fmt(self.estimatedPrintTime());\u000a            return "-";\u000a        };\u000a        self.estimatedPrintTimeString = ko.pureComputed(function() {\u000a            return estimatedPrintTimeStringHlpr(self.settings.appearance_fuzzyTimes() ? formatFuzzyPrintTime : formatDuration);\u000a        });\u000a        self.estimatedPrintTimeExactString = ko.pureComputed(function() {\u000a            return estimatedPrintTimeStringHlpr(formatDuration);\u000a        });\u000a        self.byteString = ko.pureComputed(function() {\u000a            if (!self.filesize())\u000a                return "-";\u000a            var filepos = self.filepos() ? formatSize(self.filepos()) : "-";\u000a            return filepos + " / " + formatSize(self.filesize());\u000a        });\u000a        self.heightString = ko.pureComputed(function() {\u000a            if (!self.currentHeight())\u000a                return "-";\u000a            return _.sprintf("%.02fmm", self.currentHeight());\u000a        });\u000a        self.printTimeString = ko.pureComputed(function() {\u000a            if (!self.printTime())\u000a                return "-";\u000a            return formatDuration(self.printTime());\u000a        });\u000a        var printTimeLeftStringHlpr = function (fmt) {\u000a            if (self.printTimeLeft() === undefined) {\u000a                if (!self.printTime() || !(self.isPrinting() || self.isPaused())) {\u000a                    return "-";\u000a                } else {\u000a                    return gettext("Still stabilizing...");\u000a                }\u000a            } else {\u000a                return fmt(self.printTimeLeft());\u000a            }\u000a        };\u000a        self.printTimeLeftString = ko.pureComputed(function() {\u000a            return printTimeLeftStringHlpr(self.settings.appearance_fuzzyTimes() ? formatFuzzyPrintTime : formatDuration);\u000a        });\u000a        self.printTimeLeftExactString = ko.pureComputed(function() {\u000a            return printTimeLeftStringHlpr(formatDuration);\u000a        });\u000a        self.printTimeLeftOriginString = ko.pureComputed(function() {\u000a            var value = self.printTimeLeftOrigin();\u000a            switch (value) {\u000a                case "linear": {\u000a                    return gettext("Based on a linear approximation (very low accuracy, especially at the beginning of the print)");\u000a                }\u000a                case "analysis": {\u000a                    return gettext("Based on the estimate from analysis of file (medium accuracy)");\u000a                }\u000a                case "mixed-analysis": {\u000a                    return gettext("Based on a mix of estimate from analysis and calculation (medium accuracy)");\u000a                }\u000a                case "average": {\u000a                    return gettext("Based on the average total of past prints of this model with the same printer profile (usually good accuracy)");\u000a                }\u000a                case "mixed-average": {\u000a                    return gettext("Based on a mix of average total from past prints and calculation (usually good accuracy)");\u000a                }\u000a                case "estimate": {\u000a                    return gettext("Based on the calculated estimate (best accuracy)");\u000a                }\u000a                default: {\u000a                    return "";\u000a                }\u000a            }\u000a        });\u000a        self.printTimeLeftOriginClass = ko.pureComputed(function() {\u000a            var value = self.printTimeLeftOrigin();\u000a            switch (value) {\u000a                default:\u000a                case "linear": {\u000a                    return "text-error";\u000a                }\u000a                case "analysis":\u000a                case "mixed-analysis": {\u000a                    return "text-warning";\u000a                }\u000a                case "average":\u000a                case "mixed-average":\u000a                case "estimate": {\u000a                    return "text-success";\u000a                }\u000a            }\u000a        });\u000a        self.progressString = ko.pureComputed(function() {\u000a            if (!self.progress())\u000a                return 0;\u000a            return self.progress();\u000a        });\u000a        self.progressBarString = ko.pureComputed(function() {\u000a            if (!self.progress()) {\u000a                return "";\u000a            }\u000a            return _.sprintf("%d%%", self.progress());\u000a        });\u000a        self.pauseString = ko.pureComputed(function() {\u000a            if (self.isPaused())\u000a                return gettext("Continue");\u000a            else\u000a                return gettext("Pause");\u000a        });\u000a\u000a        self.timelapseString = ko.pureComputed(function() {\u000a            var timelapse = self.timelapse();\u000a\u000a            if (!timelapse || !timelapse.hasOwnProperty("type"))\u000a                return "-";\u000a\u000a            var type = timelapse["type"];\u000a            if (type == "zchange") {\u000a                return gettext("On Z Change");\u000a            } else if (type == "timed") {\u000a                return gettext("Timed") + " (" + timelapse["options"]["interval"] + " " + gettext("sec") + ")";\u000a            } else {\u000a                return "-";\u000a            }\u000a        });\u000a\u000a        self.userString = ko.pureComputed(function() {\u000a            var user = self.user();\u000a            if (!CONFIG_ACCESS_CONTROL || user === "_dummy") {\u000a                return "";\u000a            }\u000a\u000a            if (user === "_api") {\u000a                user = "API client";\u000a            }\u000a\u000a            var file = self.filename();\u000a            return (user ? user : (file ? "-" : ""));\u000a        });\u000a\u000a        self.dateString = ko.pureComputed(function() {\u000a            var date = self.filedate();\u000a            if (!date) {\u000a                return "";\u000a            }\u000a\u000a            return formatDate(date, {seconds:true});\u000a        });\u000a\u000a        self.fromCurrentData = function(data) {\u000a            self._fromData(data);\u000a        };\u000a\u000a        self.fromHistoryData = function(data) {\u000a            self._fromData(data);\u000a        };\u000a\u000a        self.fromTimelapseData = function(data) {\u000a            self.timelapse(data);\u000a        };\u000a\u000a        self._fromData = function(data) {\u000a            self._processStateData(data.state);\u000a            self._processJobData(data.job);\u000a            self._processProgressData(data.progress);\u000a            self._processZData(data.currentZ);\u000a            self._processBusyFiles(data.busyFiles);\u000a        };\u000a\u000a        self._processStateData = function(data) {\u000a            var prevPaused = self.isPaused();\u000a\u000a            self.stateString(gettext(data.text));\u000a            self.isErrorOrClosed(data.flags.closedOrError);\u000a            self.isOperational(data.flags.operational);\u000a            self.isPaused(data.flags.paused);\u000a            self.isPrinting(data.flags.printing);\u000a            self.isCancelling(data.flags.cancelling);\u000a            self.isPausing(data.flags.pausing);\u000a            self.isError(data.flags.error);\u000a            self.isReady(data.flags.ready);\u000a            self.isSdReady(data.flags.sdReady);\u000a\u000a            if (self.isPaused() !== prevPaused) {\u000a                if (self.isPaused()) {\u000a                    self.titlePrintButton(self.TITLE_PRINT_BUTTON_PAUSED);\u000a                    self.titlePauseButton(self.TITLE_PAUSE_BUTTON_PAUSED);\u000a                } else {\u000a                    self.titlePrintButton(self.TITLE_PRINT_BUTTON_UNPAUSED);\u000a                    self.titlePauseButton(self.TITLE_PAUSE_BUTTON_UNPAUSED);\u000a                }\u000a            }\u000a        };\u000a\u000a        self._processJobData = function(data) {\u000a            if (data.file) {\u000a                self.filename(data.file.name);\u000a                self.filepath(data.file.path);\u000a                self.filesize(data.file.size);\u000a                self.filedisplay(data.file.display);\u000a                self.filedate(data.file.date);\u000a                self.sd(data.file.origin === "sdcard");\u000a            } else {\u000a                self.filename(undefined);\u000a                self.filepath(undefined);\u000a                self.filesize(undefined);\u000a                self.filedisplay(undefined);\u000a                self.filedate(undefined);\u000a                self.sd(undefined);\u000a            }\u000a\u000a            self.estimatedPrintTime(data.estimatedPrintTime);\u000a            self.lastPrintTime(data.lastPrintTime);\u000a\u000a            var result = [];\u000a            if (data.filament && typeof(data.filament) === "object" && _.keys(data.filament).length > 0) {\u000a                var keys = _.keys(data.filament);\u000a                keys.sort();\u000a                _.each(keys, function(key) {\u000a                    if (!_.startsWith(key, "tool") || !data.filament[key] || !data.filament[key].hasOwnProperty("length") || data.filament[key].length <= 0) return;\u000a\u000a                    result.push({\u000a                        name: ko.observable(gettext("Tool") + " " + key.substr("tool".length)),\u000a                        data: ko.observable(data.filament[key])\u000a                    });\u000a                });\u000a            }\u000a            self.filament(result);\u000a\u000a            self.user(data.user);\u000a        };\u000a\u000a        self._processProgressData = function(data) {\u000a            if (data.completion) {\u000a                self.progress(data.completion);\u000a            } else {\u000a                self.progress(undefined);\u000a            }\u000a            self.filepos(data.filepos);\u000a            self.printTime(data.printTime);\u000a            self.printTimeLeft(data.printTimeLeft);\u000a            self.printTimeLeftOrigin(data.printTimeLeftOrigin);\u000a        };\u000a\u000a        self._processZData = function(data) {\u000a            self.currentHeight(data);\u000a        };\u000a\u000a        self._processBusyFiles = function(data) {\u000a            var busyFiles = [];\u000a            _.each(data, function(entry) {\u000a                if (entry.hasOwnProperty("path") && entry.hasOwnProperty("origin")) {\u000a                    busyFiles.push(entry.origin + ":" + entry.path);\u000a                }\u000a            });\u000a            self.busyFiles(busyFiles);\u000a        };\u000a\u000a        self.print = function() {\u000a            if (self.isPaused()) {\u000a                showConfirmationDialog({\u000a                    message: gettext("This will restart the print job from the beginning."),\u000a                    onproceed: function() {\u000a                        OctoPrint.job.restart();\u000a                    }\u000a                });\u000a            } else {\u000a                if (!self.settings.feature_printStartConfirmation()) {\u000a                    OctoPrint.job.start();\u000a                } else {\u000a                    showConfirmationDialog({\u000a                        message: gettext("This will start a new print job. Please check that the print bed is clear."),\u000a                        question: gettext("Do you want to start the print job now?"),\u000a                        cancel: gettext("No"),\u000a                        proceed: gettext("Yes"),\u000a                        onproceed: function() {\u000a                            OctoPrint.job.start();\u000a                        },\u000a                        nofade: true\u000a                    });\u000a                }\u000a\u000a            }\u000a        };\u000a\u000a        self.onlyPause = function() {\u000a            OctoPrint.job.pause();\u000a        };\u000a\u000a        self.onlyResume = function() {\u000a            OctoPrint.job.resume();\u000a        };\u000a\u000a        self.pause = function(action) {\u000a            OctoPrint.job.togglePause();\u000a        };\u000a\u000a        self.cancel = function() {\u000a            if (!self.settings.feature_printCancelConfirmation()) {\u000a                OctoPrint.job.cancel();\u000a            } else {\u000a                showConfirmationDialog({\u000a                    message: gettext("This will cancel your print."),\u000a                    cancel: gettext("No"),\u000a                    proceed: gettext("Yes"),\u000a                    onproceed: function() {\u000a                        OctoPrint.job.cancel();\u000a                    },\u000a                    nofade: true\u000a                });\u000a            }\u000a        };\u000a    }\u000a\u000a    OCTOPRINT_VIEWMODELS.push({\u000a        construct: PrinterStateViewModel,\u000a        dependencies: ["loginStateViewModel", "settingsViewModel"],\u000a        elements: ["#state_wrapper", "#drop_overlay"]\u000a    });\u000a});\u000a\u000a;\u000a
p0
.