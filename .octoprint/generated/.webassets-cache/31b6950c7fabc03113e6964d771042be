V// source: js/app/viewmodels/wizard.js\u000a$(function() {\u000a    function WizardViewModel(parameters) {\u000a        var self = this;\u000a\u000a        self.loginState = parameters[0];\u000a        self.settingsViewModel = parameters[1];\u000a\u000a        self.wizardDialog = undefined;\u000a        self.reloadOverlay = undefined;\u000a\u000a        self.allViewModels = undefined;\u000a\u000a        self.finishing = false;\u000a        self.wizards = [];\u000a\u000a        self.isDialogActive = function() {\u000a            return self.wizardDialog.is(":visible");\u000a        };\u000a\u000a        self.showDialog = function() {\u000a            if (!CONFIG_WIZARD || !((CONFIG_FIRST_RUN && !CONFIG_ACCESS_CONTROL_ACTIVE) || self.loginState.isAdmin())) return;\u000a\u000a            self.getWizardDetails()\u000a                .done(function(response) {\u000a                    callViewModels(self.allViewModels, "onWizardDetails", [response]);\u000a\u000a                    if (!self.isDialogActive()) {\u000a                        self.wizardDialog.modal({\u000a                            minHeight: function() { return Math.max($.fn.modal.defaults.maxHeight() - 80, 250); }\u000a                        }).css({\u000a                            width: 'auto',\u000a                            'margin-left': function() { return -($(this).width() /2); }\u000a                        });\u000a                    }\u000a\u000a                    callViewModels(self.allViewModels, "onWizardShow");\u000a\u000a                    callViewModels(self.allViewModels, "onBeforeWizardTabChange", [OCTOPRINT_INITIAL_WIZARD, undefined]);\u000a                    callViewModels(self.allViewModels, "onAfterWizardTabChange", [OCTOPRINT_INITIAL_WIZARD]);\u000a                });\u000a        };\u000a\u000a        self.closeDialog = function() {\u000a            self.wizardDialog.modal("hide");\u000a        };\u000a\u000a        self.onStartup = function() {\u000a            self.wizardDialog = $("#wizard_dialog");\u000a            self.wizardDialog.on('show', function(event) {\u000a                OctoPrint.coreui.wizardOpen = true;\u000a            });\u000a            self.wizardDialog.on('hidden', function(event) {\u000a                OctoPrint.coreui.wizardOpen = false;\u000a            });\u000a\u000a            self.reloadOverlay = $("#reloadui_overlay");\u000a        };\u000a\u000a        self.onUserLoggedIn = function() {\u000a            self.showDialog();\u000a        };\u000a\u000a        self.onAllBound = function(allViewModels) {\u000a            self.allViewModels = allViewModels;\u000a            self.wizardDialog.bootstrapWizard({\u000a                tabClass: "nav nav-list",\u000a                nextSelector: ".button-next",\u000a                previousSelector: ".button-previous",\u000a                finishSelector: ".button-finish",\u000a                onTabClick: function() {\u000a                    // we don't allow clicking on the tabs\u000a                    return false;\u000a                },\u000a                onTabShow: function(tab, navigation, index) {\u000a                    if (index < 0 || tab.length == 0) {\u000a                        return true;\u000a                    }\u000a\u000a                    var total = self.wizardDialog.bootstrapWizard("navigationLength");\u000a\u000a                    if (index == total) {\u000a                        self.wizardDialog.find(".button-next").hide();\u000a                        self.wizardDialog.find(".button-finish").show().removeClass("disabled");\u000a                    } else {\u000a                        self.wizardDialog.find(".button-finish").hide();\u000a                        self.wizardDialog.find(".button-next").show();\u000a                    }\u000a\u000a                    var active = tab[0].id;\u000a                    if (active != undefined) {\u000a                        callViewModels(allViewModels, "onAfterWizardTabChange", [active]);\u000a                    }\u000a                },\u000a                onTabChange: function(tab, navigation, index, nextTabIndex, nextTab) {\u000a                    var current, next;\u000a\u000a                    if (index == undefined || index < 0 ||\u000a                        nextTabIndex == undefined || nextTabIndex < 0 ||\u000a                        index == nextTabIndex ||\u000a                        tab.length == 0 || nextTab.length == 0) {\u000a                        // let's ignore that nonsense\u000a                        return;\u000a                    }\u000a\u000a                    current = tab[0].id;\u000a                    next = nextTab[0].id;\u000a\u000a                    if (current != undefined && next != undefined) {\u000a                        var result = true;\u000a                        callViewModels(allViewModels, "onBeforeWizardTabChange", function(method) {\u000a                            // we want to continue evaluating even if result becomes false\u000a                            result = (method(next, current) !== false) && result;\u000a                        });\u000a\u000a                        // also trigger the onWizardTabChange event here which we misnamed and\u000a                        // on which we misordered the parameters on during development but which might\u000a                        // already be used somewhere - log a deprecation warning to console though\u000a                        callViewModels(allViewModels, "onWizardTabChange", function(method, viewModel) {\u000a                            log.warn("View model", viewModel, "is using deprecated callback \u005c"onWizardTabChange\u005c", please change to \u005c"onBeforeWizardTabChange\u005c"");\u000a\u000a                            // we want to continue evaluating even if result becomes false\u000a                            result = (method(current, next) !== false) && result;\u000a                        });\u000a                        return result;\u000a                    }\u000a                },\u000a                onFinish: function(tab, navigation, index) {\u000a                    var closeDialog = true;\u000a                    callViewModels(allViewModels, "onBeforeWizardFinish", function(method) {\u000a                        // we don't need to call all methods here, one method saying that\u000a                        // the dialog must not be closed yet is enough to stop\u000a                        //\u000a                        // we evaluate closeDialog first to make sure we don't call\u000a                        // the method once it becomes false\u000a                        closeDialog = closeDialog && (method() !== false);\u000a                    });\u000a\u000a                    if (closeDialog) {\u000a                        var reload = false;\u000a                        callViewModels(allViewModels, "onWizardFinish", function(method) {\u000a                            // if any of our methods returns that it wants to reload\u000a                            // we'll need to set reload to true\u000a                            //\u000a                            // order is important here - the method call needs to happen\u000a                            // first, or it won't happen after the reload flag has been\u000a                            // set once due to the || making further evaluation unnecessary\u000a                            // then\u000a                            reload = (method() == "reload") || reload;\u000a                        });\u000a                        self.finishWizard()\u000a                            .done(function() {\u000a                                self.closeDialog();\u000a                                if (reload) {\u000a                                    self.reloadOverlay.show();\u000a                                }\u000a                                callViewModels(allViewModels, "onAfterWizardFinish");\u000a                            });\u000a                    }\u000a                }\u000a            });\u000a            self.showDialog();\u000a        };\u000a\u000a        self.getWizardDetails = function() {\u000a            return OctoPrint.wizard.get()\u000a                .done(function(response) {\u000a                    self.wizards = _.filter(_.keys(response), function(key) { return response[key] && response[key]["required"] && !response[key]["ignored"]; });\u000a                });\u000a        };\u000a\u000a        self.finishWizard = function() {\u000a            var deferred = $.Deferred();\u000a            self.finishing = true;\u000a\u000a            self.settingsViewModel.saveData()\u000a                .done(function() {\u000a                    OctoPrint.wizard.finish(self.wizards)\u000a                        .done(function() {\u000a                            deferred.resolve(arguments);\u000a                        })\u000a                        .fail(function() {\u000a                            deferred.reject(arguments);\u000a                        })\u000a                        .always(function() {\u000a                            self.finishing = false;\u000a                        });\u000a                })\u000a                .fail(function() {\u000a                    deferred.reject(arguments);\u000a                });\u000a\u000a            return deferred;\u000a        };\u000a\u000a        self.onSettingsPreventRefresh = function() {\u000a            return self.isDialogActive();\u000a        }\u000a    }\u000a\u000a    OCTOPRINT_VIEWMODELS.push({\u000a        construct: WizardViewModel,\u000a        dependencies: ["loginStateViewModel", "settingsViewModel"],\u000a        elements: ["#wizard_dialog"]\u000a    });\u000a});\u000a\u000a;\u000a
p0
.