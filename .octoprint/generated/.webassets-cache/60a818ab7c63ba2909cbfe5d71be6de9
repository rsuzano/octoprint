V// source: js/app/viewmodels/system.js\u000a$(function() {\u000a    function SystemViewModel(parameters) {\u000a        var self = this;\u000a\u000a        self.loginState = parameters[0];\u000a\u000a        self.lastCommandResponse = undefined;\u000a        self.systemActions = ko.observableArray([]);\u000a\u000a        self.requestData = function() {\u000a            self.requestCommandData();\u000a        };\u000a\u000a        self.requestCommandData = function() {\u000a            if (!self.loginState.isAdmin()) {\u000a                return $.Deferred().reject().promise();\u000a            }\u000a\u000a            return OctoPrint.system.getCommands()\u000a                .done(self.fromCommandResponse);\u000a        };\u000a\u000a        self.fromCommandResponse = function(response) {\u000a            var actions = [];\u000a            if (response.core && response.core.length) {\u000a                _.each(response.core, function(data) {\u000a                    var action = _.extend({}, data);\u000a                    action.actionSource = "core";\u000a                    actions.push(action);\u000a                });\u000a                if (response.custom && response.custom.length) {\u000a                    actions.push({action: "divider"});\u000a                }\u000a            }\u000a            _.each(response.custom, function(data) {\u000a                var action = _.extend({}, data);\u000a                action.actionSource = "custom";\u000a                actions.push(action);\u000a            });\u000a            self.lastCommandResponse = response;\u000a            self.systemActions(actions);\u000a        };\u000a\u000a        self.triggerCommand = function(commandSpec) {\u000a            var deferred = $.Deferred();\u000a\u000a            var callback = function() {\u000a                OctoPrint.system.executeCommand(commandSpec.actionSource, commandSpec.action)\u000a                    .done(function() {\u000a                        var text;\u000a                        if (commandSpec.async) {\u000a                            text = gettext("The command \u005c"%(command)s\u005c" was triggered asynchronously");\u000a                        } else {\u000a                            text = gettext("The command \u005c"%(command)s\u005c" executed successfully");\u000a                        }\u000a\u000a                        new PNotify({\u000a                            title: "Success",\u000a                            text: _.sprintf(text, {command: commandSpec.name}),\u000a                            type: "success"\u000a                        });\u000a                        deferred.resolve(["success", arguments]);\u000a                    })\u000a                    .fail(function(jqXHR, textStatus, errorThrown) {\u000a                        if (!commandSpec.hasOwnProperty("ignore") || !commandSpec.ignore) {\u000a                            var error = "<p>" + _.sprintf(gettext("The command \u005c"%(command)s\u005c" could not be executed."), {command: commandSpec.name}) + "</p>";\u000a                            error += pnotifyAdditionalInfo("<pre>" + jqXHR.responseText + "</pre>");\u000a                            new PNotify({title: gettext("Error"), text: error, type: "error", hide: false});\u000a                            deferred.reject(["error", arguments]);\u000a                        } else {\u000a                            deferred.resolve(["ignored", arguments]);\u000a                        }\u000a                    });\u000a            };\u000a\u000a            if (commandSpec.confirm) {\u000a                showConfirmationDialog({\u000a                    message: commandSpec.confirm,\u000a                    onproceed: function() {\u000a                        callback();\u000a                    },\u000a                    oncancel: function() {\u000a                        deferred.reject("cancelled", arguments);\u000a                    }\u000a                });\u000a            } else {\u000a                callback();\u000a            }\u000a\u000a            return deferred.promise();\u000a        };\u000a\u000a        self.onUserLoggedIn = function(user) {\u000a            if (user.admin) {\u000a                self.requestData();\u000a            } else {\u000a                self.onUserLoggedOut();\u000a            }\u000a        };\u000a\u000a        self.onUserLoggedOut = function() {\u000a            self.lastCommandResponse = undefined;\u000a            self.systemActions([]);\u000a        };\u000a\u000a        self.onEventSettingsUpdated = function() {\u000a            if (self.loginState.isAdmin()) {\u000a                self.requestData();\u000a            }\u000a        };\u000a    }\u000a\u000a    OCTOPRINT_VIEWMODELS.push({\u000a        construct: SystemViewModel,\u000a        dependencies: ["loginStateViewModel"]\u000a    });\u000a});\u000a\u000a;\u000a
p0
.