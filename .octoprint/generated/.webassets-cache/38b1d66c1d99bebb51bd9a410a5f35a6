V// source: plugin/DryRun/js/bootstrap-checkbox.js\u000a/**\u000a * see https://vsn4ik.github.io/bootstrap-checkbox/\u000a * $.inArray: friends with IE8. Use Array.prototype.indexOf in future.\u000a * $.proxy: friends with IE8. Use Function.prototype.bind in future.\u000a */\u000a\u000a'use strict';\u000a\u000a(function(factory) {\u000a  if (typeof define === 'function' && define.amd) {\u000a    // AMD. Register as an anonymous module\u000a    define(['jquery'], factory);\u000a  } else if (typeof exports === 'object') {\u000a    // Node/CommonJS\u000a    module.exports = factory(require('jquery'));\u000a  } else {\u000a    // Browser globals\u000a    factory(jQuery);\u000a  }\u000a})(function($) {\u000a  function create() {\u000a    return $($.map(arguments, $.proxy(document, 'createElement')));\u000a  }\u000a\u000a  function Checkboxpicker(element, options) {\u000a    this.element = element;\u000a    this.$element = $(element);\u000a\u000a    var data = this.$element.data();\u000a\u000a    // <... data-reverse>\u000a    if (data.reverse === '') {\u000a      data.reverse = true;\u000a    }\u000a\u000a    // <... data-switch-always>\u000a    if (data.switchAlways === '') {\u000a      data.switchAlways = true;\u000a    }\u000a\u000a    // <... data-html>\u000a    if (data.html === '') {\u000a      data.html = true;\u000a    }\u000a\u000a    this.options = $.extend({}, $.fn.checkboxpicker.defaults, options, data);\u000a\u000a    if (this.$element.closest('label').length) {\u000a      console.warn(this.options.warningMessage);\u000a\u000a      return;\u000a    }\u000a\u000a    this.$group = create('div');\u000a\u000a    // .btn-group-justified works with <a> elements as the <button> doesn't pick up the styles\u000a    this.$buttons = create('a', 'a');\u000a\u000a    this.$off = this.$buttons.eq(this.options.reverse ? 1 : 0);\u000a    this.$on = this.$buttons.eq(this.options.reverse ? 0 : 1);\u000a\u000a    this.init();\u000a  }\u000a\u000a  Checkboxpicker.prototype = {\u000a    init: function() {\u000a      var fn = this.options.html ? 'html' : 'text';\u000a\u000a      this.element.hidden = true;\u000a      this.$group.addClass(this.options.baseGroupCls).addClass(this.options.groupCls);\u000a      this.$buttons.addClass(this.options.baseCls).addClass(this.options.cls);\u000a\u000a      if (this.options.offLabel) {\u000a        this.$off[fn](this.options.offLabel);\u000a      }\u000a\u000a      if (this.options.onLabel) {\u000a        this.$on[fn](this.options.onLabel);\u000a      }\u000a\u000a      if (this.options.offIconCls) {\u000a        if (this.options.offLabel) {\u000a          // &nbsp; -- whitespace (or wrap into span)\u000a          this.$off.prepend('&nbsp;');\u000a        }\u000a\u000a        // $.addClass for XSS check\u000a        create('span').addClass(this.options.iconCls).addClass(this.options.offIconCls).prependTo(this.$off);\u000a      }\u000a\u000a      if (this.options.onIconCls) {\u000a        if (this.options.onLabel) {\u000a          // &nbsp; -- whitespace (or wrap into span)\u000a          this.$on.prepend('&nbsp;');\u000a        }\u000a\u000a        // $.addClass for XSS check\u000a        create('span').addClass(this.options.iconCls).addClass(this.options.onIconCls).prependTo(this.$on);\u000a      }\u000a\u000a      if (this.element.checked) {\u000a        this.$on.addClass('active');\u000a        this.$on.addClass(this.options.onActiveCls);\u000a        this.$off.addClass(this.options.offCls);\u000a      } else {\u000a        this.$off.addClass('active');\u000a        this.$off.addClass(this.options.offActiveCls);\u000a        this.$on.addClass(this.options.onCls);\u000a      }\u000a\u000a      if (this.element.title) {\u000a        this.$group.attr('title', this.element.title);\u000a      } else {\u000a        // Attribute title (offTitle, onTitle) on this.$buttons not work (native) if this.element.disabled, fine!\u000a        if (this.options.offTitle) {\u000a          this.$off.attr('title', this.options.offTitle);\u000a        }\u000a\u000a        if (this.options.onTitle) {\u000a          this.$on.attr('title', this.options.onTitle);\u000a        }\u000a      }\u000a\u000a      // Keydown event only trigger if set tabindex, fine!\u000a      this.$group.on('keydown', $.proxy(this, 'keydown'));\u000a\u000a      // Don't trigger if <a> element has .disabled class, fine!\u000a      this.$buttons.on('click', $.proxy(this, 'click'));\u000a\u000a      this.$element.on('change', $.proxy(this, 'toggleChecked'));\u000a      $(this.element.labels).on('click', $.proxy(this, 'focus'));\u000a      $(this.element.form).on('reset', $.proxy(this, 'reset'));\u000a\u000a      this.$group.append(this.$buttons).insertAfter(this.element);\u000a\u000a      // Necessarily after this.$group.append() (autofocus)\u000a      if (this.element.readOnly || this.element.disabled) {\u000a        this.$buttons.addClass('disabled');\u000a\u000a        if (this.options.disabledCursor) {\u000a          this.$group.css('cursor', this.options.disabledCursor);\u000a        }\u000a      } else {\u000a        this.$group.attr('tabindex', this.element.tabIndex);\u000a\u000a        if (this.element.autofocus) {\u000a          this.focus();\u000a        }\u000a      }\u000a    },\u000a    toggleChecked: function() {\u000a      // this.$group not focus (incorrect on form reset)\u000a      this.$buttons.toggleClass('active');\u000a\u000a      this.$off.toggleClass(this.options.offCls);\u000a      this.$off.toggleClass(this.options.offActiveCls);\u000a      this.$on.toggleClass(this.options.onCls);\u000a      this.$on.toggleClass(this.options.onActiveCls);\u000a    },\u000a    toggleDisabled: function() {\u000a      this.$buttons.toggleClass('disabled');\u000a\u000a      if (this.element.disabled) {\u000a        this.$group.attr('tabindex', this.element.tabIndex);\u000a        this.$group.css('cursor', '');\u000a      } else {\u000a        this.$group.removeAttr('tabindex');\u000a\u000a        if (this.options.disabledCursor) {\u000a          this.$group.css('cursor', this.options.disabledCursor);\u000a        }\u000a      }\u000a    },\u000a    focus: function() {\u000a      // Original behavior\u000a      this.$group.trigger('focus');\u000a    },\u000a    click: function(event) {\u000a      // Strictly event.currentTarget. Fix #19\u000a      var $button = $(event.currentTarget);\u000a\u000a      if (!$button.hasClass('active') || this.options.switchAlways) {\u000a        this.change();\u000a      }\u000a    },\u000a    change: function() {\u000a      this.set(!this.element.checked);\u000a    },\u000a    set: function(value) {\u000a      // Fix #12\u000a      this.element.checked = value;\u000a\u000a      this.$element.trigger('change');\u000a    },\u000a    keydown: function(event) {\u000a      if ($.inArray(event.keyCode, this.options.toggleKeyCodes) !== -1) {\u000a        // Off vertical scrolling on Spacebar\u000a        event.preventDefault();\u000a\u000a        this.change();\u000a      } else if (event.keyCode === 13) {\u000a        $(this.element.form).trigger('submit');\u000a      }\u000a    },\u000a    reset: function() {\u000a      // this.element.checked not used (incorect on large number of form elements)\u000a      if ((this.element.defaultChecked && this.$off.hasClass('active')) || (!this.element.defaultChecked && this.$on.hasClass('active'))) {\u000a        this.set(this.element.defaultChecked);\u000a      }\u000a    }\u000a  };\u000a\u000a  // Be hooks friendly\u000a  var oldPropHooks = $.extend({}, $.propHooks);\u000a\u000a  // Support $.fn.prop setter (checked, disabled)\u000a  $.extend($.propHooks, {\u000a    checked: {\u000a      set: function(element, value) {\u000a        var data = $.data(element, 'bs.checkbox');\u000a\u000a        if (data && element.checked !== value) {\u000a          data.change(value);\u000a        }\u000a\u000a        if (oldPropHooks.checked && oldPropHooks.checked.set) {\u000a          oldPropHooks.checked.set(element, value);\u000a        }\u000a      }\u000a    },\u000a    disabled: {\u000a      set: function(element, value) {\u000a        var data = $.data(element, 'bs.checkbox');\u000a\u000a        if (data && element.disabled !== value) {\u000a          data.toggleDisabled();\u000a        }\u000a\u000a        if (oldPropHooks.disabled && oldPropHooks.disabled.set) {\u000a          oldPropHooks.disabled.set(element, value);\u000a        }\u000a      }\u000a    }\u000a  });\u000a\u000a  var old = $.fn.checkboxpicker;\u000a\u000a  // For AMD/Node/CommonJS used elements (optional)\u000a  // http://learn.jquery.com/jquery-ui/environments/amd/\u000a  $.fn.checkboxpicker = function(options, elements) {\u000a    var $elements;\u000a\u000a    if (this instanceof $) {\u000a      $elements = this;\u000a    } else if (typeof options === 'string') {\u000a      $elements = $(options);\u000a    } else {\u000a      $elements = $(elements);\u000a    }\u000a\u000a    return $elements.each(function() {\u000a      var data = $.data(this, 'bs.checkbox');\u000a\u000a      if (!data) {\u000a        data = new Checkboxpicker(this, options);\u000a\u000a        $.data(this, 'bs.checkbox', data);\u000a      }\u000a    });\u000a  };\u000a\u000a  // HTML5 data-*.\u000a  // <input data-on-label="43"> --> $('input').data('onLabel') === '43'.\u000a  $.fn.checkboxpicker.defaults = {\u000a    baseGroupCls: 'btn-group',\u000a    baseCls: 'btn',\u000a    groupCls: null,\u000a    cls: null,\u000a    offCls: 'btn-default',\u000a    onCls: 'btn-default',\u000a    offActiveCls: 'btn-danger',\u000a    onActiveCls: 'btn-success',\u000a    offLabel: 'No',\u000a    onLabel: 'Yes',\u000a    offTitle: false,\u000a    onTitle: false,\u000a    iconCls: 'glyphicon',\u000a\u000a    disabledCursor: 'not-allowed',\u000a\u000a    // Event key codes:\u000a    // 13: Return\u000a    // 32: Spacebar\u000a    toggleKeyCodes: [13, 32],\u000a\u000a    warningMessage: 'Please do not use Bootstrap-checkbox element in label element.'\u000a  };\u000a\u000a  $.fn.checkboxpicker.Constructor = Checkboxpicker;\u000a  $.fn.checkboxpicker.noConflict = function() {\u000a    $.fn.checkboxpicker = old;\u000a    return this;\u000a  };\u000a\u000a  return $.fn.checkboxpicker;\u000a});\u000a\u000a;\u000a
p0
.