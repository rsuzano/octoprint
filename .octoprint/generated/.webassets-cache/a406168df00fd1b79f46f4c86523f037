V// source: plugin/marlin_flasher/js/marlin_flasher.js\u000a$(function() {\u000a    function MarlinFlasherViewModel(parameters) {\u000a        var self = this;\u000a        self.settingsViewModel = parameters[0];\u000a        self.loginStateViewModel = parameters[1];\u000a        self.arduinoFirmwareFileButton = $("#arduino_firmware_file");\u000a        self.platformioFirmwareFileButton = $("#platformio_firmware_file");\u000a        self.arduinoFlashButton = $("#arduino_flash-button");\u000a        self.platformioFlashButton = $("#platformio_flash-button");\u000a        self.searchCoreButton = $("#search-core-btn");\u000a        self.searchLibButton = $("#search-lib-btn");\u000a        self.stderrModal = $("#marlin_flasher_modal");\u000a\u000a        self.coreSearchResult = ko.observableArray();\u000a        self.libSearchResult = ko.observableArray();\u000a        self.boardList = ko.observableArray();\u000a        self.selectedBoard = ko.observable();\u000a        self.boardOptions = ko.observableArray();\u000a        self.stderr = ko.observable();\u000a        self.uploadProgress = ko.observable(0);\u000a        self.flashingProgress = ko.observable(0);\u000a        self.progressStep = ko.observable();\u000a\u000a        self.fileUploadParams = {\u000a            maxNumberOfFiles: 1,\u000a            headers: OctoPrint.getRequestHeaders(),\u000a            done: function(e, data) {\u000a                new PNotify({\u000a                    title: gettext("Firmware upload successful"),\u000a                    text: data.result.file,\u000a                    type: "success"\u000a                });\u000a                self.uploadProgress(0);\u000a            },\u000a            error: function(jqXHR, status, error) {\u000a                if(error === "") {\u000a                    new PNotify({\u000a                        title: gettext("Firmware upload failed"),\u000a                        text: gettext("Check the maximum firmware size"),\u000a                        type: "error"\u000a                    });\u000a                } else {\u000a                    if(typeof jqXHR.responseJSON.error === "undefined") {\u000a                        new PNotify({\u000a                            title: gettext("Firmware upload failed"),\u000a                            text: gettext("The given file was not valid"),\u000a                            type: "error"\u000a                        });\u000a                    } else {\u000a                        new PNotify({\u000a                            title: gettext("Firmware upload failed"),\u000a                            text: jqXHR.responseJSON.error,\u000a                            type: "error"\u000a                        });\u000a                    }\u000a                };\u000a                self.uploadProgress(0);\u000a            },\u000a            progress: function(e, data) {\u000a                self.uploadProgress((data.loaded / data.total) * 100);\u000a            }\u000a        }\u000a\u000a        self.arduinoFirmwareFileButton.fileupload(self.fileUploadParams);\u000a        self.platformioFirmwareFileButton.fileupload(self.fileUploadParams);\u000a        self.searchCore = function(form) {\u000a            self.searchCoreButton.button("loading");\u000a            $.ajax({\u000a                type: "GET",\u000a                headers: OctoPrint.getRequestHeaders(),\u000a                url: "/plugin/marlin_flasher/cores/search",\u000a                data: $(form).serialize()\u000a            }).done(function (data) {\u000a                self.coreSearchResult(data);\u000a            }).fail(function(jqXHR, status, error) {\u000a                new PNotify({\u000a                    title: gettext("Core search failed"),\u000a                    text: jqXHR.responseJSON.error,\u000a                    type: "error"\u000a                });\u000a            }).always(function() {\u000a                self.searchCoreButton.button("reset");\u000a            });\u000a        };\u000a        self.installCore = function(data, event) {\u000a            $(event.currentTarget).button("loading");\u000a            $.ajax({\u000a                type: "POST",\u000a                headers: OctoPrint.getRequestHeaders(),\u000a                url: "/plugin/marlin_flasher/cores/install",\u000a                data: {\u000a                    core: data.ID\u000a                }\u000a            }).done(function(data) {\u000a                self.loadBoardList();\u000a                new PNotify({\u000a                    title: gettext("Core install successful"),\u000a                    text: gettext("Successfully installed {core}").replace("{core}", data.core),\u000a                    type: "success"\u000a                });\u000a            }).fail(function(jqXHR, status, error) {\u000a                new PNotify({\u000a                    title: gettext("Core install failed"),\u000a                    text: jqXHR.responseJSON.error,\u000a                    type: "error"\u000a                });\u000a            }).always(function() {\u000a                $(event.currentTarget).button("reset");\u000a            });\u000a        };\u000a        self.uninstallCore = function(data, event) {\u000a            $(event.currentTarget).button("loading");\u000a            $.ajax({\u000a                type: "POST",\u000a                headers: OctoPrint.getRequestHeaders(),\u000a                url: "/plugin/marlin_flasher/cores/uninstall",\u000a                data: {\u000a                    core: data.ID\u000a                }\u000a            }).done(function(data) {\u000a                self.loadBoardList();\u000a                new PNotify({\u000a                    title: gettext("Core uninstall successful"),\u000a                    text: gettext("Successfully uninstalled {core}").replace("{core}", data.core),\u000a                    type: "success"\u000a                });\u000a            }).fail(function(jqXHR, status, error) {\u000a                new PNotify({\u000a                    title: gettext("Core uninstall failed"),\u000a                    text: jqXHR.responseJSON.error,\u000a                    type: "error"\u000a                });\u000a            }).always(function() {\u000a                $(event.currentTarget).button("reset");\u000a            });\u000a        };\u000a        self.searchLib = function(form) {\u000a            self.searchLibButton.button("loading");\u000a            $.ajax({\u000a                type: "GET",\u000a                headers: OctoPrint.getRequestHeaders(),\u000a                url: "/plugin/marlin_flasher/libs/search",\u000a                data: $(form).serialize()\u000a            }).done(function (data) {\u000a                if(data.hasOwnProperty("libraries")) {\u000a                    self.libSearchResult(data.libraries);\u000a                } else {\u000a                    self.libSearchResult([]);\u000a                }\u000a            }).fail(function(jqXHR, status, error) {\u000a                new PNotify({\u000a                    title: gettext("Lib search failed"),\u000a                    text: jqXHR.responseJSON.error,\u000a                    type: "error"\u000a                });\u000a            }).always(function() {\u000a                self.searchLibButton.button("reset");\u000a            });\u000a        };\u000a        self.installLib = function(data, event) {\u000a            $(event.currentTarget).button("loading");\u000a            $.ajax({\u000a                type: "POST",\u000a                headers: OctoPrint.getRequestHeaders(),\u000a                url: "/plugin/marlin_flasher/libs/install",\u000a                data: {\u000a                    lib: data.name\u000a                }\u000a            }).done(function(data) {\u000a                new PNotify({\u000a                    title: gettext("Lib install successful"),\u000a                    text: gettext("Successfully installed {lib}").replace("{lib}", data.lib),\u000a                    type: "success"\u000a                });\u000a            }).fail(function(jqXHR, status, error) {\u000a                new PNotify({\u000a                    title: gettext("Lib install failed"),\u000a                    text: jqXHR.responseJSON.error,\u000a                    type: "error"\u000a                });\u000a            }).always(function() {\u000a                $(event.currentTarget).button("reset");\u000a            });\u000a        };\u000a        self.uninstallLib =  function(data, event) {\u000a            $(event.currentTarget).button("loading");\u000a            $.ajax({\u000a                type: "POST",\u000a                headers: OctoPrint.getRequestHeaders(),\u000a                url: "/plugin/marlin_flasher/libs/uninstall",\u000a                data: {\u000a                    lib: data.name\u000a                }\u000a            }).done(function(data) {\u000a                new PNotify({\u000a                    title: gettext("Lib uninstall successful"),\u000a                    text: gettext("Successfully uninstalled {lib}").replace("{lib}", data.lib),\u000a                    type: "success"\u000a                });\u000a            }).fail(function(jqXHR, status, error) {\u000a                new PNotify({\u000a                    title: gettext("Lib uninstall failed"),\u000a                    text: jqXHR.responseJSON.error,\u000a                    type: "error"\u000a                });\u000a            }).always(function() {\u000a                $(event.currentTarget).button("reset");\u000a            });\u000a        };\u000a        self.loadBoardList = function() {\u000a            if(self.loginStateViewModel.isAdmin() && self.settingsViewModel.settings.plugins.marlin_flasher.platform_type() == "arduino") {\u000a                $.ajax({\u000a                    type: "GET",\u000a                    headers: OctoPrint.getRequestHeaders(),\u000a                    url: "/plugin/marlin_flasher/board/listall",\u000a                }).done(function (data) {\u000a                    if(data.boards) {\u000a                        self.boardList(data.boards);\u000a                    } else {\u000a                        self.boardList([]);\u000a                    }\u000a                }).fail(function(jqXHR, status, error) {\u000a                    new PNotify({\u000a                        title: gettext("Board list fetch failed"),\u000a                        text: jqXHR.responseJSON.error,\u000a                        type: "error"\u000a                    });\u000a                });\u000a            }\u000a        };\u000a        self.flash = function(form) {\u000a            self.arduinoFlashButton.button("loading");\u000a            self.platformioFlashButton.button("loading");\u000a            $.ajax({\u000a                type: "POST",\u000a                headers: OctoPrint.getRequestHeaders(),\u000a                url: "/plugin/marlin_flasher/flash",\u000a                data: $(form).serialize()\u000a            }).done(function (data) {\u000a                new PNotify({\u000a                    title: gettext("Flashing successful"),\u000a                    text: data.message,\u000a                    type: "success"\u000a                });\u000a            }).fail(function(jqXHR, status, error) {\u000a                new PNotify({\u000a                    title: gettext("Flashing failed"),\u000a                    text: jqXHR.responseJSON.error,\u000a                    type: "error"\u000a                });\u000a                self.progressStep(null);\u000a                self.flashingProgress(0);\u000a                if(jqXHR.responseJSON.stderr) {\u000a                    self.stderr(jqXHR.responseJSON.stderr);\u000a                    self.stderrModal.modal("show");\u000a                } else {\u000a                    self.stderr(null);\u000a                }\u000a            }).always(function() {\u000a                self.arduinoFlashButton.button("reset");\u000a                self.platformioFlashButton.button("reset");\u000a            });\u000a        };\u000a        self.selectedBoard.subscribe(function(newValue) {\u000a            self.boardOptions([]);\u000a            if (newValue) {\u000a                $.ajax({\u000a                    type: "GET",\u000a                    headers: OctoPrint.getRequestHeaders(),\u000a                    url: "/plugin/marlin_flasher/board/details",\u000a                    data: {\u000a                        fqbn: newValue\u000a                    }\u000a                }).done(function (data) {\u000a                    if(data) {\u000a                        self.boardOptions(data.config_options);\u000a                    }\u000a                }).fail(function(jqXHR, status, error) {\u000a                    new PNotify({\u000a                        title: gettext("Board option fetch failed"),\u000a                        text: jqXHR.responseJSON.error,\u000a                        type: "error"\u000a                    });\u000a                });\u000a            }\u000a        });\u000a        self.onAllBound = function(viewModels) {\u000a            self.loadBoardList();\u000a        };\u000a        self.onDataUpdaterPluginMessage = function(plugin, message) {\u000a            if(plugin == "marlin_flasher") {\u000a                if(message.type === "flash_progress") {\u000a                    self.progressStep(message.step);\u000a                    self.flashingProgress(message.progress);\u000a                } else if(message.type === "settings_saved") {\u000a                    self.loadBoardList();\u000a                }\u000a            }\u000a        };\u000a        self.onSettingsBeforeSave = function() {\u000a            self.settingsViewModel.settings.plugins.marlin_flasher.max_upload_size(parseInt(self.settingsViewModel.settings.plugins.marlin_flasher.max_upload_size()));\u000a            if(self.settingsViewModel.settings.plugins.marlin_flasher.arduino.additional_urls() === "") {\u000a                self.settingsViewModel.settings.plugins.marlin_flasher.arduino.additional_urls(null);\u000a            }\u000a            if(self.settingsViewModel.settings.plugins.marlin_flasher.arduino.cli_path() === "") {\u000a                self.settingsViewModel.settings.plugins.marlin_flasher.arduino.cli_path(null);\u000a            }\u000a            if(self.settingsViewModel.settings.plugins.marlin_flasher.platformio.cli_path() === "") {\u000a                self.settingsViewModel.settings.plugins.marlin_flasher.platformio.cli_path(null);\u000a            }\u000a        };\u000a    }\u000a\u000a    OCTOPRINT_VIEWMODELS.push({\u000a        construct: MarlinFlasherViewModel,\u000a        dependencies: [\u000a            "settingsViewModel",\u000a            "loginStateViewModel"\u000a        ],\u000a        elements: [\u000a            "#settings_plugin_marlin_flasher",\u000a            "#wizard_plugin_marlin_flasher",\u000a            "#tab_plugin_marlin_flasher",\u000a            "#marlin_flasher_modal"\u000a        ]\u000a    });\u000a});\u000a\u000a;\u000a
p0
.