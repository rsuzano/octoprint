V// source: plugin/DryRun/js/DryRun.js\u000a/*\u000a * View model for DryRun\u000a *\u000a * Author: OllisGit\u000a * License: AGPLv3\u000a */\u000a$(function() {\u000a    function DryrunViewModel(parameters) {\u000a\u000a        var PLUGIN_ID = "DryRun";\u000a\u000a        var self = this;\u000a\u000a        // assign the injected parameters, e.g.:\u000a        // self.loginStateViewModel = parameters[0];\u000a        self.settingsViewModel = parameters[1];\u000a\u000a        // add checkbox AFTER everything is loaded\u000a        $(function() {\u000a            /* start checkbox - stuff */\u000a            var dryRunCheckBoxHTML = "<input id='dryRunCheckBox' type='checkbox' data-off-active-cls='btn-success' data-on-active-cls='btn-danger'/>";\u000a            var offIconHTML = "<span class='fa-stack'><i class='fa fa-thermometer-half fa-stack-1x'></i></span>";\u000a            var onIconHTML = "<span class='fa-stack'><i class='fa fa-ban fa-stack-1x'></i></span>";\u000a            var onIconHTMLMobile = "<span class='fa-stack'><i class='fa fa-thermometer-half fa-stack-1x'></i><i class='fa fa-ban fa-stack-1x' style='color: tomato; font-size: 2.6em;'></i></span>";\u000a\u000a            var lastJobButton = $('#job_print').parent().children().last();\u000a            lastJobButton.after(dryRunCheckBoxHTML);\u000a\u000a            var dryRunNavBar = $("#dryrun_plugin_navbar");\u000a            var dryRunCheckBox = $("#dryRunCheckBox");\u000a\u000a            var dryRunCheckBoxPicker;\u000a            if ($('html').is('#touch')) {\u000a                dryRunCheckBoxPicker = dryRunCheckBox.checkboxpicker({\u000a                  html: true,\u000a                  offLabel: offIconHTML,\u000a                  onLabel: onIconHTMLMobile\u000a                });\u000a                $('#job_print').parent().find('button').toggleClass('span4 span3');\u000a                $('#job_print').parent().find('.btn-group').toggleClass('span3');\u000a            } else {\u000a                $("#dryRunCheckBox").wrap("<div class='span12 checkbox-wrapper'/>");\u000a                dryRunCheckBoxPicker = dryRunCheckBox.checkboxpicker({\u000a                  html: true,\u000a                  offLabel: offIconHTML + "DryRun OFF",\u000a                  onLabel: onIconHTML + "DryRun ON"\u000a                });\u000a             }\u000a\u000a            dryRunCheckBoxPicker.on('change', function() {\u000a                    var checkValue = dryRunCheckBox.is(':checked');\u000a                    // Show/Hide Banner\u000a                    if (checkValue == true){\u000a                        dryRunNavBar.show();\u000a                    } else {\u000a                        dryRunNavBar.hide();\u000a                    }\u000a                    // Send current vactivation state to backend\u000a                    $.ajax({\u000a                        url: API_BASEURL + "plugin/"+PLUGIN_ID,\u000a                        type: "POST",\u000a                        dataType: "json",\u000a                        data: JSON.stringify({\u000a                            command: "checkboxState",\u000a                            checkboxValue: checkValue\u000a                        }),\u000a                        contentType: "application/json; charset=UTF-8"\u000a                    }).done(function(data){\u000a\u000a                    }).always(function(){\u000a\u000a                    }) ;\u000a            });\u000a\u000a        // receive data from backend\u000a        self.onDataUpdaterPluginMessage = function(plugin, data) {\u000a            if (plugin != PLUGIN_ID) {\u000a                return;\u000a            }\u000a            //alert("Data from backend!!!" +JSON.stringify(data));\u000a            if (data.dryRunEnabled != undefined){\u000a                dryRunCheckBoxPicker.prop('checked', data.dryRunEnabled);\u000a            }\u000a        }\u000a\u000a        });\u000a    }\u000a\u000a    /* view model class, parameters for constructor, container to bind to\u000a     * Please see http://docs.octoprint.org/en/master/plugins/viewmodels.html#registering-custom-viewmodels for more details\u000a     * and a full list of the available options.\u000a     */\u000a    OCTOPRINT_VIEWMODELS.push({\u000a        construct: DryrunViewModel,\u000a        // ViewModels your plugin depends on, e.g. loginStateViewModel, settingsViewModel, ...\u000a        dependencies: ["loginStateViewModel", "settingsViewModel"],\u000a        // Elements to bind to, e.g. #settings_plugin_DryRun, #tab_plugin_DryRun, ...\u000a        elements: [\u000a            document.getElementById("dryRun_plugin_settings"),\u000a            document.getElementById("dryrun_plugin_navbar")\u000a        ]\u000a    });\u000a});\u000a\u000a;\u000a
p0
.