V// source: js/app/viewmodels/users.js\u000a$(function() {\u000a    function UsersViewModel(parameters) {\u000a        var self = this;\u000a\u000a        self.loginState = parameters[0];\u000a\u000a        // initialize list helper\u000a        self.listHelper = new ItemListHelper(\u000a            "users",\u000a            {\u000a                "name": function(a, b) {\u000a                    // sorts ascending\u000a                    if (a["name"].toLocaleLowerCase() < b["name"].toLocaleLowerCase()) return -1;\u000a                    if (a["name"].toLocaleLowerCase() > b["name"].toLocaleLowerCase()) return 1;\u000a                    return 0;\u000a                }\u000a            },\u000a            {},\u000a            "name",\u000a            [],\u000a            [],\u000a            CONFIG_USERSPERPAGE\u000a        );\u000a\u000a        self.emptyUser = {name: "", admin: false, active: false};\u000a\u000a        self.currentUser = ko.observable(self.emptyUser);\u000a\u000a        self.editorUsername = ko.observable(undefined);\u000a        self.editorPassword = ko.observable(undefined);\u000a        self.editorRepeatedPassword = ko.observable(undefined);\u000a        self.editorApikey = ko.observable(undefined);\u000a        self.editorAdmin = ko.observable(undefined);\u000a        self.editorActive = ko.observable(undefined);\u000a\u000a        self.addUserDialog = undefined;\u000a        self.editUserDialog = undefined;\u000a        self.changePasswordDialog = undefined;\u000a\u000a        self.currentUser.subscribe(function(newValue) {\u000a            self.resetEditUser();\u000a            if (newValue !== undefined) {\u000a                self.editorUsername(newValue.name);\u000a                self.editorAdmin(newValue.admin);\u000a                self.editorActive(newValue.active);\u000a                self.editorApikey(newValue.apikey);\u000a            }\u000a        });\u000a\u000a        self.editorPasswordMismatch = ko.pureComputed(function() {\u000a            return self.editorPassword() !== self.editorRepeatedPassword();\u000a        });\u000a\u000a        self.resetEditUser = function() {\u000a            self.editorUsername(undefined);\u000a            self.editorAdmin(undefined);\u000a            self.editorActive(undefined);\u000a            self.editorApikey(undefined);\u000a            self.editorPassword(undefined);\u000a            self.editorRepeatedPassword(undefined);\u000a        };\u000a\u000a        self.requestData = function() {\u000a            if (!CONFIG_ACCESS_CONTROL) return;\u000a            if (!self.loginState.isAdmin()) return;\u000a\u000a            OctoPrint.users.list()\u000a                .done(self.fromResponse);\u000a        };\u000a\u000a        self.fromResponse = function(response) {\u000a            self.listHelper.updateItems(response.users);\u000a        };\u000a\u000a        self.showAddUserDialog = function() {\u000a            if (!CONFIG_ACCESS_CONTROL) return;\u000a\u000a            self.currentUser(undefined);\u000a            self.editorActive(true);\u000a            self.addUserDialog.modal("show");\u000a        };\u000a\u000a        self.confirmAddUser = function() {\u000a            if (!CONFIG_ACCESS_CONTROL) return;\u000a\u000a            var user = {\u000a                name: self.editorUsername(),\u000a                password: self.editorPassword(),\u000a                admin: self.editorAdmin(),\u000a                active: self.editorActive()\u000a            };\u000a\u000a            self.addUser(user)\u000a                .done(function() {\u000a                    // close dialog\u000a                    self.currentUser(undefined);\u000a                    self.addUserDialog.modal("hide");\u000a                });\u000a        };\u000a\u000a        self.showEditUserDialog = function(user) {\u000a            if (!CONFIG_ACCESS_CONTROL) return;\u000a\u000a            var process = function(user) {\u000a                self.currentUser(user);\u000a                self.editUserDialog.modal("show");\u000a            };\u000a\u000a            // make sure we have the current user data, see #2534\u000a            OctoPrint.users.get(user.name)\u000a                .done(function(data) {\u000a                    process(data);\u000a                })\u000a                .fail(function() {\u000a                    log.warn("Could not fetch current user data, proceeding with client side data copy");\u000a                    process(user);\u000a                });\u000a        };\u000a\u000a        self.confirmEditUser = function() {\u000a            if (!CONFIG_ACCESS_CONTROL) return;\u000a\u000a            var user = self.currentUser();\u000a            user.active = self.editorActive();\u000a            user.admin = self.editorAdmin();\u000a\u000a            self.updateUser(user)\u000a                .done(function() {\u000a                    // close dialog\u000a                    self.currentUser(undefined);\u000a                    self.editUserDialog.modal("hide");\u000a                });\u000a        };\u000a\u000a        self.showChangePasswordDialog = function(user) {\u000a            if (!CONFIG_ACCESS_CONTROL) return;\u000a\u000a            self.currentUser(user);\u000a            self.changePasswordDialog.modal("show");\u000a        };\u000a\u000a        self.confirmChangePassword = function() {\u000a            if (!CONFIG_ACCESS_CONTROL) return;\u000a\u000a            self.updatePassword(self.currentUser().name, self.editorPassword())\u000a                .done(function() {\u000a                    // close dialog\u000a                    self.currentUser(undefined);\u000a                    self.changePasswordDialog.modal("hide");\u000a                });\u000a        };\u000a\u000a        self.confirmGenerateApikey = function() {\u000a            if (!CONFIG_ACCESS_CONTROL) return;\u000a\u000a            self.generateApikey(self.currentUser().name)\u000a                .done(function(response) {\u000a                    self._updateApikey(response.apikey);\u000a                });\u000a        };\u000a\u000a        self.confirmDeleteApikey = function() {\u000a            if (!CONFIG_ACCESS_CONTROL) return;\u000a\u000a            self.deleteApikey(self.currentUser().name)\u000a                .done(function() {\u000a                    self._updateApikey(undefined);\u000a                });\u000a        };\u000a\u000a        self.copyApikey = function() {\u000a            copyToClipboard(self.editorApikey());\u000a        };\u000a\u000a        self._updateApikey = function(apikey) {\u000a            self.editorApikey(apikey);\u000a            self.requestData();\u000a        };\u000a\u000a        //~~ Framework\u000a\u000a        self.onStartup = function() {\u000a            self.addUserDialog = $("#settings-usersDialogAddUser");\u000a            self.addUserDialog.on("hidden", function() {\u000a                self.resetEditUser();\u000a            });\u000a\u000a            self.editUserDialog = $("#settings-usersDialogEditUser");\u000a            self.editUserDialog.on("hidden", function() {\u000a                self.resetEditUser();\u000a            });\u000a\u000a            self.changePasswordDialog = $("#settings-usersDialogChangePassword");\u000a            self.changePasswordDialog.on("hidden", function() {\u000a                self.resetEditUser();\u000a            });\u000a        };\u000a\u000a        //~~ API calls\u000a\u000a        self.addUser = function(user) {\u000a            if (!user) {\u000a                throw OctoPrint.InvalidArgumentError("user must be set");\u000a            }\u000a            if (!self.loginState.isAdmin()) return $.Deferred().reject("You are not authorized to perform this action").promise();\u000a\u000a            return OctoPrint.users.add(user)\u000a                .done(self.fromResponse);\u000a        };\u000a\u000a        self.removeUser = function(user) {\u000a            if (!user) {\u000a                throw OctoPrint.InvalidArgumentError("user must be set");\u000a            }\u000a            if (!self.loginState.isAdmin()) return $.Deferred().reject("You are not authorized to perform this action").promise();\u000a\u000a            if (user.name === self.loginState.username()) {\u000a                // we do not allow to delete ourselves\u000a                new PNotify({\u000a                    title: gettext("Not possible"),\u000a                    text: gettext("You may not delete your own account."),\u000a                    type: "error"\u000a                });\u000a                return $.Deferred().reject("You may not delete your own account").promise();\u000a            }\u000a\u000a            return OctoPrint.users.delete(user.name)\u000a                .done(self.fromResponse);\u000a        };\u000a\u000a        self.updateUser = function(user) {\u000a            if (!user) {\u000a                throw OctoPrint.InvalidArgumentError("user must be set");\u000a            }\u000a\u000a            return OctoPrint.users.update(user.name, user.active, user.admin)\u000a                .done(self.fromResponse);\u000a        };\u000a\u000a        self.updatePassword = function(username, password) {\u000a            return OctoPrint.users.changePassword(username, password);\u000a        };\u000a\u000a        self.generateApikey = function(username) {\u000a            return OctoPrint.users.generateApiKey(username)\u000a                .done(function() {\u000a                    self.requestData();\u000a                });\u000a        };\u000a\u000a        self.deleteApikey = function(username) {\u000a            return OctoPrint.users.resetApiKey(username);\u000a        };\u000a\u000a        self.onUserLoggedIn = function(user) {\u000a            self.requestData();\u000a        }\u000a    }\u000a\u000a    OCTOPRINT_VIEWMODELS.push({\u000a        construct: UsersViewModel,\u000a        dependencies: ["loginStateViewModel"]\u000a    });\u000a});\u000a\u000a;\u000a
p0
.