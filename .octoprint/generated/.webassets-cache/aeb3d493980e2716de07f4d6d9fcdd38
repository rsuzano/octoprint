V// source: js/app/viewmodels/loginstate.js\u000a$(function() {\u000a    function LoginStateViewModel() {\u000a        var self = this;\u000a\u000a        self.loginUser = ko.observable("");\u000a        self.loginPass = ko.observable("");\u000a        self.loginRemember = ko.observable(false);\u000a\u000a        self.loggedIn = ko.observable(false);\u000a        self.username = ko.observable(undefined);\u000a        self.isAdmin = ko.observable(false);\u000a        self.isUser = ko.observable(false);\u000a\u000a        self.allViewModels = undefined;\u000a        self.startupDeferred = $.Deferred();\u000a\u000a        self.currentUser = ko.observable(undefined);\u000a\u000a        self.elementUsernameInput = undefined;\u000a        self.elementPasswordInput = undefined;\u000a        self.elementLoginButton = undefined;\u000a\u000a        self.externalAddressNotification = undefined;\u000a\u000a        self.userMenuText = ko.pureComputed(function() {\u000a            if (self.loggedIn()) {\u000a                return self.username();\u000a            } else {\u000a                return gettext("Login");\u000a            }\u000a        });\u000a\u000a        self.userMenuTitle = ko.pureComputed(function() {\u000a            if (self.loggedIn()) {\u000a                return _.sprintf(gettext("Logged in as %(name)s"), {name: self.username()});\u000a            } else {\u000a                return gettext("Login");\u000a            }\u000a        });\u000a\u000a        self.reloadUser = function() {\u000a            if (self.currentUser() === undefined) {\u000a                return;\u000a            }\u000a\u000a            return OctoPrint.users.get(self.currentUser().name)\u000a                .done(self.updateCurrentUserData);\u000a        };\u000a\u000a        self.requestData = function() {\u000a            return OctoPrint.browser.passiveLogin()\u000a                .done(self.fromResponse);\u000a        };\u000a\u000a        self.fromResponse = function(response) {\u000a            var process = function() {\u000a                var currentLoggedIn = self.loggedIn();\u000a                if (response && response.name) {\u000a                    self.loggedIn(true);\u000a                    self.updateCurrentUserData(response);\u000a                    if (!currentLoggedIn) {\u000a                        callViewModels(self.allViewModels, "onUserLoggedIn", [response]);\u000a                        log.info("User " + response.name + " logged in")\u000a                    }\u000a\u000a                    if (response.session) {\u000a                        OctoPrint.socket.sendAuth(response.name, response.session);\u000a                    }\u000a\u000a                    // Show warning if connecting from what seems to be an external IP address, unless ignored\u000a                    var ignorePublicAddressWarning = localStorage["loginState.ignorePublicAddressWarning"];\u000a                    if (ignorePublicAddressWarning === undefined) {\u000a                        ignorePublicAddressWarning = false;\u000a                    } else {\u000a                        ignorePublicAddressWarning = JSON.parse(ignorePublicAddressWarning);\u000a                    }\u000a\u000a                    if (response._is_external_client && !ignorePublicAddressWarning) {\u000a                        var text = gettext("<p>It seems that you are connecting to OctoPrint over the public internet.</p>" +\u000a                            "<p>This is strongly discouraged unless you have taken proper network security precautions. " +\u000a                            "Your printer is an appliance you really should not be giving access to " +\u000a                            "everyone with an internet connection.</p><p><strong>Please see " +\u000a                            "<a href=\u005c"%(url)s\u005c" target=\u005c"_blank\u005c" rel=\u005c"noreferrer noopener\u005c">this blog post</a> for " +\u000a                            "ways to safely access your OctoPrint instance from remote.</strong></p>" +\u000a                            "<p><small>If you know what you are doing or you are sure this message is " +\u000a                            "mistaken since you are in an isolated LAN, feel free to ignore it.</small></p>");\u000a                        text = _.sprintf(text, {url: "https://octoprint.org/blog/2018/09/03/safe-remote-access/"});\u000a\u000a                        if (self.externalAddressNotification !== undefined) {\u000a                            self.externalAddressNotification.remove();\u000a                        }\u000a\u000a                        self.externalAddressNotification = new PNotify({\u000a                            title: gettext("Possible external access detected"),\u000a                            text: text,\u000a                            hide: false,\u000a                            type: "error",\u000a                            confirm: {\u000a                                confirm: true,\u000a                                buttons: [{\u000a                                    text: gettext("Ignore"),\u000a                                    addClass: "btn btn-danger",\u000a                                    click: function(notice) {\u000a                                        notice.remove();\u000a                                        localStorage["loginState.ignorePublicAddressWarning"] = JSON.stringify(true);\u000a                                    }\u000a                                }, {\u000a                                    text: gettext("Later"),\u000a                                    addClass: "btn btn-primary",\u000a                                    click: function(notice) {\u000a                                        notice.remove();\u000a                                    }\u000a                                }]\u000a                            },\u000a                            buttons: {\u000a                                sticker: false\u000a                            }\u000a\u000a                        })\u000a                    }\u000a                } else {\u000a                    self.loggedIn(false);\u000a                    self.resetCurrentUserData();\u000a                    if (currentLoggedIn) {\u000a                        callViewModels(self.allViewModels, "onUserLoggedOut");\u000a                        log.info("User logged out");\u000a                    }\u000a                }\u000a            };\u000a\u000a            if (self.startupDeferred !== undefined) {\u000a                // Make sure we only fire our "onUserLogged(In|Out)" message after the application\u000a                // has started up.\u000a                self.startupDeferred.done(process);\u000a            } else {\u000a                process();\u000a            }\u000a        };\u000a\u000a        self.updateCurrentUserData = function(data) {\u000a            self.username(data.name);\u000a            self.isUser(data.user);\u000a            self.isAdmin(data.admin);\u000a\u000a            self.currentUser(data);\u000a        };\u000a\u000a        self.resetCurrentUserData = function() {\u000a            self.username(undefined);\u000a            self.isUser(false);\u000a            self.isAdmin(false);\u000a\u000a            self.currentUser(undefined);\u000a        };\u000a\u000a        self.login = function(u, p, r) {\u000a            var username = u || self.loginUser();\u000a            var password = p || self.loginPass();\u000a            var remember = (r != undefined ? r : self.loginRemember());\u000a\u000a            return OctoPrint.browser.login(username, password, remember)\u000a                .done(function(response) {\u000a                    new PNotify({title: gettext("Login successful"), text: _.sprintf(gettext('You are now logged in as "%(username)s"'), {username: response.name}), type: "success"});\u000a                    self.fromResponse(response);\u000a\u000a                    self.loginUser("");\u000a                    self.loginPass("");\u000a                    self.loginRemember(false);\u000a\u000a                    if (history && history.replaceState) {\u000a                        history.replaceState({success: true}, document.title, window.location.pathname);\u000a                    }\u000a                })\u000a                .fail(function(response) {\u000a                    switch(response.status) {\u000a                        case 401: {\u000a                            new PNotify({\u000a                                title: gettext("Login failed"),\u000a                                text: gettext("User unknown or wrong password"),\u000a                                type: "error"\u000a                            });\u000a                            break;\u000a                        }\u000a                        case 403: {\u000a                            new PNotify({\u000a                                title: gettext("Login failed"),\u000a                                text: gettext("Your account is deactivated"),\u000a                                type: "error"\u000a                            });\u000a                            break;\u000a                        }\u000a                    }\u000a                });\u000a        };\u000a\u000a        self.logout = function() {\u000a            return OctoPrint.browser.logout()\u000a                .done(function(response) {\u000a                    new PNotify({title: gettext("Logout successful"), text: gettext("You are now logged out"), type: "success"});\u000a                    self.fromResponse(response);\u000a                })\u000a                .fail(function(error) {\u000a                    if (error && error.status === 401) {\u000a                         self.fromResponse(false);\u000a                    }\u000a                });\u000a        };\u000a\u000a        self.prepareLogin = function(data, event) {\u000a            if(event && event.preventDefault) {\u000a                event.preventDefault();\u000a            }\u000a            self.login();\u000a        };\u000a\u000a        self.onDataUpdaterReauthRequired = function(reason) {\u000a            if (reason === "logout" || reason === "removed") {\u000a                self.logout();\u000a            } else {\u000a                self.requestData();\u000a            }\u000a        };\u000a\u000a        self.onAllBound = function(allViewModels) {\u000a            self.allViewModels = allViewModels;\u000a            self.startupDeferred.resolve();\u000a            self.startupDeferred = undefined;\u000a        };\u000a\u000a        self.onStartup = function() {\u000a            self.elementUsernameInput = $("#login_user");\u000a            self.elementPasswordInput = $("#login_pass");\u000a            self.elementLoginButton = $("#login_button");\u000a\u000a            var toggle = $("li.dropdown#navbar_login");\u000a            var button = $("a", toggle);\u000a\u000a            button.on("click", function(e) {\u000a                $(this).parent().toggleClass("open");\u000a            });\u000a\u000a            $("body").on("click", function(e) {\u000a                if (!toggle.hasClass("open")) {\u000a                    return;\u000a                }\u000a\u000a                var anyFormLinkOrButton = $("#login_dropdown_loggedout a, #login_dropdown_loggedin a, #login_dropdown_loggedout button, #login_dropdown_loggedin button");\u000a                var dropdown = $("li.dropdown#navbar_login");\u000a                var anyLastpassButton = $("#__lpform_login_user, #__lpform_login_pass");\u000a\u000a                var isLinkOrButton = anyFormLinkOrButton.is(e.target) || anyFormLinkOrButton.has(e.target).length !== 0;\u000a                var isDropdown = dropdown.is(e.target) || dropdown.has(e.target).length !== 0;\u000a                var isLastpass = anyLastpassButton.is(e.target) || anyLastpassButton.has(e.target).length !== 0;\u000a\u000a                if (isLinkOrButton || !(isDropdown || isLastpass)) {\u000a                    toggle.removeClass("open");\u000a                }\u000a            });\u000a\u000a            if (self.elementUsernameInput && self.elementUsernameInput.length\u000a                && self.elementLoginButton && self.elementLoginButton.length) {\u000a                self.elementLoginButton.blur(function() {\u000a                    self.elementUsernameInput.focus();\u000a                })\u000a            }\u000a        };\u000a    }\u000a\u000a    OCTOPRINT_VIEWMODELS.push({\u000a        construct: LoginStateViewModel\u000a    });\u000a});\u000a\u000a;\u000a
p0
.