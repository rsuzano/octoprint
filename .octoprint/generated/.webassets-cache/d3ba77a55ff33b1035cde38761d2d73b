V// source: js/app/viewmodels/files.js\u000a$(function() {\u000a    function FilesViewModel(parameters) {\u000a        var self = this;\u000a\u000a        self.settingsViewModel = parameters[0];\u000a        self.loginState = parameters[1];\u000a        self.printerState = parameters[2];\u000a        self.slicing = parameters[3];\u000a        self.printerProfiles=parameters[4];\u000a\u000a        self.filesListVisible = ko.observable(true);\u000a        self.isErrorOrClosed = ko.observable(undefined);\u000a        self.isOperational = ko.observable(undefined);\u000a        self.isPrinting = ko.observable(undefined);\u000a        self.isPaused = ko.observable(undefined);\u000a        self.isError = ko.observable(undefined);\u000a        self.isReady = ko.observable(undefined);\u000a        self.isLoading = ko.observable(undefined);\u000a        self.isSdReady = ko.observable(undefined);\u000a\u000a        self.searchQuery = ko.observable(undefined);\u000a        self.searchQuery.subscribe(function() {\u000a            self.performSearch();\u000a        });\u000a\u000a        self.freeSpace = ko.observable(undefined);\u000a        self.totalSpace = ko.observable(undefined);\u000a        self.freeSpaceString = ko.pureComputed(function() {\u000a            if (!self.freeSpace())\u000a                return "-";\u000a            return formatSize(self.freeSpace());\u000a        });\u000a        self.totalSpaceString = ko.pureComputed(function() {\u000a            if (!self.totalSpace())\u000a                return "-";\u000a            return formatSize(self.totalSpace());\u000a        });\u000a\u000a        self.diskusageWarning = ko.pureComputed(function() {\u000a            return self.freeSpace() !== undefined\u000a                && self.freeSpace() < self.settingsViewModel.server_diskspace_warning();\u000a        });\u000a        self.diskusageCritical = ko.pureComputed(function() {\u000a            return self.freeSpace() !== undefined\u000a                && self.freeSpace() < self.settingsViewModel.server_diskspace_critical();\u000a        });\u000a        self.diskusageString = ko.pureComputed(function() {\u000a            if (self.diskusageCritical()) {\u000a                return gettext("Your available free disk space is critically low.");\u000a            } else if (self.diskusageWarning()) {\u000a                return gettext("Your available free disk space is starting to run low.");\u000a            } else {\u000a                return gettext("Your current disk usage.");\u000a            }\u000a        });\u000a\u000a        self.uploadButton = undefined;\u000a        self.uploadSdButton = undefined;\u000a        self.uploadProgressBar = undefined;\u000a        self.localTarget = undefined;\u000a        self.sdTarget = undefined;\u000a\u000a        self.dropOverlay = undefined;\u000a        self.dropZone = undefined;\u000a        self.dropZoneLocal = undefined;\u000a        self.dropZoneSd = undefined;\u000a        self.dropZoneBackground = undefined;\u000a        self.dropZoneLocalBackground = undefined;\u000a        self.dropZoneSdBackground = undefined;\u000a        self.listElement = undefined;\u000a\u000a        self.ignoreUpdatedFilesEvent = false;\u000a\u000a        self.addingFolder = ko.observable(false);\u000a        self.activeRemovals = ko.observableArray([]);\u000a\u000a        self.addFolderDialog = undefined;\u000a        self.addFolderName = ko.observable(undefined);\u000a        self.enableAddFolder = ko.pureComputed(function() {\u000a            return self.loginState.isUser() && self.addFolderName() && self.addFolderName().trim() !== ""\u000a                && !self.addingFolder();\u000a        });\u000a\u000a        self.allItems = ko.observable(undefined);\u000a        self.listStyle = ko.observable("folders_files");\u000a        self.currentPath = ko.observable("");\u000a        self.uploadProgressText = ko.observable();\u000a\u000a        // initialize list helper\u000a        var listHelperFilters = {\u000a            "printed": function(data) {\u000a                return !(data["prints"] && data["prints"]["success"] && data["prints"]["success"] > 0)\u000a                    || (data["type"] && data["type"] === "folder");\u000a            },\u000a            "sd": function(data) {\u000a                return data["origin"] && data["origin"] === "sdcard";\u000a            },\u000a            "local": function(data) {\u000a                return !(data["origin"] && data["origin"] === "sdcard");\u000a            }\u000a        };\u000a        var listHelperExclusiveFilters = [["sd", "local"]];\u000a\u000a        if (SUPPORTED_FILETYPES.length > 1) {\u000a            _.each(SUPPORTED_FILETYPES, function(filetype) {\u000a                listHelperFilters[filetype] = function(data) {\u000a                    return data["type"] && (data["type"] === filetype || data["type"] === "folder");\u000a                }\u000a            });\u000a            listHelperExclusiveFilters.push(SUPPORTED_FILETYPES);\u000a        }\u000a\u000a        self.listHelper = new ItemListHelper(\u000a            "gcodeFiles",\u000a            {\u000a                "name": function(a, b) {\u000a                    // sorts ascending\u000a                    if (a["display"].toLowerCase() < b["display"].toLowerCase()) return -1;\u000a                    if (a["display"].toLowerCase() > b["display"].toLowerCase()) return 1;\u000a                    return 0;\u000a                },\u000a                "upload": function(a, b) {\u000a                    // sorts descending\u000a                    if (b["date"] === undefined || a["date"] > b["date"]) return -1;\u000a                    if (a["date"] === undefined || a["date"] < b["date"]) return 1;\u000a                    return 0;\u000a                },\u000a                "size": function(a, b) {\u000a                    // sorts descending\u000a                    if (b["size"] === undefined || a["size"] > b["size"]) return -1;\u000a                    if (a["size"] === undefined || a["size"] < b["size"]) return 1;\u000a                    return 0;\u000a                }\u000a            },\u000a            listHelperFilters,\u000a            "name",\u000a            [],\u000a            listHelperExclusiveFilters,\u000a            0\u000a        );\u000a\u000a        self.availableFiletypes = ko.pureComputed(function() {\u000a            var mapping = {\u000a                model: gettext("Only show model files"),\u000a                machinecode: gettext("Only show machine code files")\u000a            };\u000a\u000a            var result = [];\u000a            _.each(SUPPORTED_FILETYPES, function(filetype) {\u000a                if (mapping[filetype]) {\u000a                    result.push({key: filetype, text: mapping[filetype]});\u000a                } else {\u000a                    result.push({key: filetype, text: _.sprintf(gettext("Only show %(type)s files"), {type: filetype})});\u000a                }\u000a            });\u000a\u000a            return result;\u000a        });\u000a\u000a        self.foldersOnlyList = ko.dependentObservable(function() {\u000a            var filter = function(data) { return data["type"] && data["type"] === "folder"; };\u000a            return _.filter(self.listHelper.paginatedItems(), filter);\u000a        });\u000a\u000a        self.filesOnlyList = ko.dependentObservable(function() {\u000a            var filter = function(data) { return data["type"] && data["type"] !== "folder"; };\u000a            return _.filter(self.listHelper.paginatedItems(), filter);\u000a        });\u000a\u000a        self.filesAndFolders = ko.dependentObservable(function() {\u000a            var style = self.listStyle();\u000a            if (style === "folders_files" || style === "files_folders") {\u000a                var files = self.filesOnlyList();\u000a                var folders = self.foldersOnlyList();\u000a\u000a                if (style === "folders_files") {\u000a                    return folders.concat(files);\u000a                } else {\u000a                    return files.concat(folders);\u000a                }\u000a            } else {\u000a                return self.listHelper.paginatedItems();\u000a            }\u000a        });\u000a\u000a        self.isLoadActionPossible = ko.pureComputed(function() {\u000a            return self.loginState.isUser() && !self.isPrinting() && !self.isPaused() && !self.isLoading();\u000a        });\u000a\u000a        self.isLoadAndPrintActionPossible = ko.pureComputed(function() {\u000a            return self.loginState.isUser() && self.isOperational() && self.isLoadActionPossible();\u000a        });\u000a\u000a        self.printerState.filepath.subscribe(function(newValue) {\u000a            self.highlightFilename(newValue);\u000a        });\u000a\u000a        self.highlightCurrentFilename = function() {\u000a            self.highlightFilename(self.printerState.filepath());\u000a        };\u000a\u000a        self.highlightFilename = function(filename) {\u000a            if (filename === undefined || filename === null) {\u000a                self.listHelper.selectNone();\u000a            } else {\u000a                self.listHelper.selectItem(function(item) {\u000a                    if (item.type === "folder") {\u000a                        return _.startsWith(filename, item.path + "/");\u000a                    } else {\u000a                        return item.path === filename;\u000a                    }\u000a                });\u000a            }\u000a        };\u000a\u000a        self.fromCurrentData = function(data) {\u000a            self._processStateData(data.state);\u000a        };\u000a\u000a        self.fromHistoryData = function(data) {\u000a            self._processStateData(data.state);\u000a        };\u000a\u000a        self._processStateData = function(data) {\u000a            self.isErrorOrClosed(data.flags.closedOrError);\u000a            self.isOperational(data.flags.operational);\u000a            self.isPaused(data.flags.paused);\u000a            self.isPrinting(data.flags.printing);\u000a            self.isError(data.flags.error);\u000a            self.isReady(data.flags.ready);\u000a            self.isLoading(data.flags.loading);\u000a            self.isSdReady(data.flags.sdReady);\u000a        };\u000a\u000a        self._otherRequestInProgress = undefined;\u000a        self._focus = undefined;\u000a        self._switchToPath = undefined;\u000a        self.requestData = function(params) {\u000a            var focus, switchToPath, force;\u000a\u000a            if (_.isObject(params)) {\u000a                focus = params.focus;\u000a                switchToPath = params.switchToPath;\u000a                force = params.force\u000a            } else if (arguments.length) {\u000a                // old argument list type call signature\u000a                log.warn("FilesViewModel.requestData called with old argument list. That is deprecated, please use parameter object instead.");\u000a                if (arguments.length >= 1) {\u000a                    if (arguments.length >= 2) {\u000a                        focus = {location: arguments[1], path: arguments[0]};\u000a                    } else {\u000a                        focus = {location: "local", path: arguments[0]};\u000a                    }\u000a                }\u000a                if (arguments.length >= 3) {\u000a                    switchToPath = arguments[2];\u000a                }\u000a                if (arguments.length >= 4) {\u000a                    force = arguments[3];\u000a                }\u000a            }\u000a\u000a            self._focus = self._focus || focus;\u000a            self._switchToPath = self._switchToPath || switchToPath;\u000a\u000a            if (self._otherRequestInProgress !== undefined) {\u000a                return self._otherRequestInProgress\u000a            }\u000a\u000a            return self._otherRequestInProgress = OctoPrint.files.list(true, force)\u000a                .done(function(response) {\u000a                    self.fromResponse(response, {focus: self._focus, switchToPath: self._switchToPath});\u000a                })\u000a                .always(function() {\u000a                    self._otherRequestInProgress = undefined;\u000a                    self._focus = undefined;\u000a                    self._switchToPath = undefined;\u000a                });\u000a        };\u000a\u000a        self.fromResponse = function(response, params) {\u000a            var focus = undefined;\u000a            var switchToPath;\u000a\u000a            if (_.isObject(params)) {\u000a                focus = params.focus || undefined;\u000a                switchToPath = params.switchToPath || undefined;\u000a            } else if (arguments.length > 1) {\u000a                log.warn("FilesViewModel.requestData called with old argument list. That is deprecated, please use parameter object instead.");\u000a                if (arguments.length > 2) {\u000a                    focus = {location: arguments[2], path: arguments[1]};\u000a                } else {\u000a                    focus = {location: "local", path: arguments[1]};\u000a                }\u000a                if (arguments.length > 3) {\u000a                    switchToPath = arguments[3] || undefined;\u000a                }\u000a            }\u000a\u000a            var files = response.files;\u000a\u000a            self.allItems(files);\u000a\u000a            // Sanity check file list - see #2572\u000a            var nonrecursive = false;\u000a            _.each(files, function(file) {\u000a                if (file.type === "folder" && file.children === undefined) {\u000a                    nonrecursive = true;\u000a                }\u000a            });\u000a            if (nonrecursive) {\u000a                log.error("At least one folder doesn't have a 'children' element defined. That means the file list request " +\u000a                    "wasn't actually made with 'recursive=true' in the query.\u005cn\u005cn" +\u000a                    "This can happen on wrong reverse proxy configs that " +\u000a                    "swallow up query parameters, see https://github.com/foosel/OctoPrint/issues/2572");\u000a            }\u000a\u000a            if (!switchToPath) {\u000a                var currentPath = self.currentPath();\u000a                if (currentPath === undefined) {\u000a                    self.listHelper.updateItems(files);\u000a                    self.currentPath("");\u000a                } else {\u000a                    // if we have a current path, make sure we stay on it\u000a                    self.changeFolderByPath(currentPath);\u000a                }\u000a            } else {\u000a                self.changeFolderByPath(switchToPath);\u000a            }\u000a\u000a            if (focus) {\u000a                // got a file to scroll to\u000a                var entryElement = self.getEntryElement({path: focus.path, origin: focus.location});\u000a                if (entryElement) {\u000a                    // scroll to uploaded element\u000a                    self.listElement.scrollTop(entryElement.offsetTop);\u000a\u000a                    // highlight uploaded element\u000a                    var element = $(entryElement);\u000a                    element.on("webkitAnimationEnd oanimationend msAnimationEnd animationend", function(e) {\u000a                        // remove highlight class again\u000a                        element.removeClass("highlight");\u000a                    });\u000a                    element.addClass("highlight");\u000a                }\u000a            }\u000a\u000a            if (response.free !== undefined) {\u000a                self.freeSpace(response.free);\u000a            }\u000a\u000a            if (response.total !== undefined) {\u000a                self.totalSpace(response.total);\u000a            }\u000a\u000a            self.highlightCurrentFilename();\u000a        };\u000a\u000a        self.changeFolder = function(data) {\u000a            if (data.children === undefined) {\u000a                log.error("Can't switch to folder '" + data.path + "', no children available");\u000a                return;\u000a            }\u000a\u000a            self.currentPath(data.path);\u000a            self.listHelper.updateItems(data.children);\u000a            self.highlightCurrentFilename();\u000a        };\u000a\u000a        self.navigateUp = function() {\u000a            var path = self.currentPath().split("/");\u000a            path.pop();\u000a            self.changeFolderByPath(path.join("/"));\u000a        };\u000a\u000a        self.changeFolderByPath = function(path) {\u000a            var element = self.elementByPath(path);\u000a            if (element) {\u000a                self.currentPath(path);\u000a                self.listHelper.updateItems(element.children);\u000a            } else{\u000a                self.currentPath("");\u000a                self.listHelper.updateItems(self.allItems());\u000a            }\u000a            self.highlightCurrentFilename();\u000a        };\u000a\u000a        self.showAddFolderDialog = function() {\u000a            if (self.addFolderDialog) {\u000a                self.addFolderName("");\u000a                self.addFolderDialog.modal("show");\u000a            }\u000a        };\u000a\u000a        self.addFolder = function() {\u000a            var name = self.addFolderName();\u000a\u000a            // "local" only for now since we only support local and sdcard,\u000a            // and sdcard doesn't support creating folders...\u000a            var location = "local";\u000a\u000a            self.ignoreUpdatedFilesEvent = true;\u000a            self.addingFolder(true);\u000a            OctoPrint.files.createFolder(location, name, self.currentPath())\u000a                .done(function(data) {\u000a                    self.requestData({\u000a                        focus: {\u000a                            path: data.folder.name,\u000a                            location: data.folder.origin\u000a                        }\u000a                    })\u000a                        .done(function() {\u000a                            self.addFolderDialog.modal("hide");\u000a                        })\u000a                        .always(function() {\u000a                            self.addingFolder(false);\u000a                        });\u000a                })\u000a                .fail(function() {\u000a                    self.addingFolder(false);\u000a                })\u000a                .always(function() {\u000a                    self.ignoreUpdatedFilesEvent = false;\u000a                });\u000a        };\u000a\u000a        self.removeFolder = function(folder, event) {\u000a            if (!folder) {\u000a                return;\u000a            }\u000a\u000a            if (folder.type !== "folder") {\u000a                return;\u000a            }\u000a\u000a            if (folder.weight > 0) {\u000a                // confirm recursive delete\u000a                var options = {\u000a                    message: _.sprintf(gettext("You are about to delete the folder \u005c"%(folder)s\u005c" which still contains files and/or sub folders."), {folder: folder.name}),\u000a                    onproceed: function() {\u000a                        self._removeEntry(folder, event);\u000a                    }\u000a                };\u000a                showConfirmationDialog(options);\u000a            } else {\u000a                self._removeEntry(folder, event);\u000a            }\u000a        };\u000a\u000a        self.loadFile = function(data, printAfterLoad) {\u000a            if (!data) {\u000a                return;\u000a            }\u000a\u000a            if (printAfterLoad && self.listHelper.isSelected(data) && self.enablePrint(data)) {\u000a                // file was already selected, just start the print job\u000a                OctoPrint.job.start();\u000a            } else {\u000a                // select file, start print job (if requested and within dimensions)\u000a                var withinPrintDimensions = self.evaluatePrintDimensions(data, true);\u000a                var print = printAfterLoad && withinPrintDimensions;\u000a\u000a                if (print && self.settingsViewModel.feature_printStartConfirmation()) {\u000a                    showConfirmationDialog({\u000a                        message: gettext("This will start a new print job. Please check that the print bed is clear."),\u000a                        question: gettext("Do you want to start the print job now?"),\u000a                        cancel: gettext("No"),\u000a                        proceed: gettext("Yes"),\u000a                        onproceed: function() {\u000a                            OctoPrint.files.select(data.origin, data.path, print);\u000a                        },\u000a                        nofade: true\u000a                    });\u000a                } else {\u000a                    OctoPrint.files.select(data.origin, data.path, print);\u000a                }\u000a            }\u000a        };\u000a\u000a        self.removeFile = function(file, event) {\u000a            if (!file) {\u000a                return;\u000a            }\u000a\u000a            if (file.type === "folder") {\u000a                return;\u000a            }\u000a\u000a            self._removeEntry(file, event);\u000a        };\u000a\u000a        self.sliceFile = function(file) {\u000a            if (!file) {\u000a                return;\u000a            }\u000a\u000a            self.slicing.show(file.origin, file.path, true, undefined, {display: file.display});\u000a        };\u000a\u000a        self.initSdCard = function() {\u000a            OctoPrint.printer.initSd();\u000a        };\u000a\u000a        self.releaseSdCard = function() {\u000a            OctoPrint.printer.releaseSd();\u000a        };\u000a\u000a        self.refreshSdFiles = function() {\u000a            OctoPrint.printer.refreshSd();\u000a        };\u000a\u000a        self._removeEntry = function(entry, event) {\u000a            self.activeRemovals.push(entry.origin + ":" + entry.path);\u000a            var finishActiveRemoval = function() {\u000a                self.activeRemovals(_.filter(self.activeRemovals(), function(e) {\u000a                    return e !== entry.origin + ":" + entry.path;\u000a                }));\u000a            };\u000a\u000a            var activateSpinner = function(){},\u000a                finishSpinner = function(){};\u000a\u000a            if (event) {\u000a                var element = $(event.currentTarget);\u000a                if (element.length) {\u000a                    var icon = $("i.fa-trash-o", element);\u000a                    if (icon.length) {\u000a                        activateSpinner = function() {\u000a                            icon.removeClass("fa-trash-o").addClass("fa-spinner fa-spin");\u000a                        };\u000a                        finishSpinner = function() {\u000a                            icon.removeClass("fa-spinner fa-spin").addClass("fa-trash-o");\u000a                        };\u000a                    }\u000a                }\u000a            }\u000a\u000a            activateSpinner();\u000a\u000a            var deferred = $.Deferred();\u000a            OctoPrint.files.delete(entry.origin, entry.path)\u000a                .done(function() {\u000a                    self.requestData()\u000a                        .done(function() {\u000a                            deferred.resolve();\u000a                        })\u000a                        .fail(function() {\u000a                            deferred.reject();\u000a                        });\u000a                })\u000a                .fail(function() {\u000a                    deferred.reject();\u000a                });\u000a\u000a            return deferred.promise()\u000a                .always(function() {\u000a                    finishActiveRemoval();\u000a                    finishSpinner();\u000a                });\u000a        };\u000a\u000a        self.downloadLink = function(data) {\u000a            if (data["refs"] && data["refs"]["download"]) {\u000a                return data["refs"]["download"];\u000a            } else {\u000a                return false;\u000a            }\u000a        };\u000a\u000a        self.lastTimePrinted = function(data) {\u000a            if (data["prints"] && data["prints"]["last"] && data["prints"]["last"]["date"]) {\u000a                return data["prints"]["last"]["date"];\u000a            } else {\u000a                return "-";\u000a            }\u000a        };\u000a\u000a        self.getSuccessClass = function(data) {\u000a            if (!data["prints"] || !data["prints"]["last"]) {\u000a                return "";\u000a            }\u000a            return data["prints"]["last"]["success"] ? "text-success" : "text-error";\u000a        };\u000a\u000a        self.templateFor = function(data) {\u000a            return "files_template_" + data.type;\u000a        };\u000a\u000a        self.getEntryId = function(data) {\u000a            return "gcode_file_" + md5(data["origin"] + ":" + data["path"]);\u000a        };\u000a\u000a        self.getEntryElement = function(data) {\u000a            var entryId = self.getEntryId(data);\u000a            var entryElements = $("#" + entryId);\u000a            if (entryElements && entryElements[0]) {\u000a                return entryElements[0];\u000a            } else {\u000a                return undefined;\u000a            }\u000a        };\u000a\u000a        self.enableRemove = function(data) {\u000a            if (_.contains(self.activeRemovals(), data.origin + ":" + data.path)) {\u000a                return false;\u000a            }\u000a\u000a            var busy = false;\u000a            if (data.type === "folder") {\u000a                busy = _.any(self.printerState.busyFiles(), function(name) {\u000a                    return _.startsWith(name, data.origin + ":" + data.path + "/");\u000a                });\u000a            } else {\u000a                busy = _.contains(self.printerState.busyFiles(), data.origin + ":" + data.path);\u000a            }\u000a            return self.loginState.isUser() && !busy;\u000a        };\u000a\u000a        self.enableSelect = function(data, printAfterSelect) {\u000a            return self.enablePrint(data) && !self.listHelper.isSelected(data);\u000a        };\u000a\u000a        self.enablePrint = function(data) {\u000a            return self.loginState.isUser() && self.isOperational() && !(self.isPrinting() || self.isPaused() || self.isLoading());\u000a        };\u000a\u000a        self.enableSlicing = function(data) {\u000a            return self.loginState.isUser() && self.slicing.enableSlicingDialog() && self.slicing.enableSlicingDialogForFile(data.name);\u000a        };\u000a\u000a        self.enableAdditionalData = function(data) {\u000a            return data["gcodeAnalysis"] || data["prints"] && data["prints"]["last"];\u000a        };\u000a\u000a        self.toggleAdditionalData = function(data) {\u000a            var entryElement = self.getEntryElement(data);\u000a            if (!entryElement) return;\u000a\u000a            var additionalInfo = $(".additionalInfo", entryElement);\u000a            additionalInfo.slideToggle("fast", function() {\u000a                $(".toggleAdditionalData i", entryElement).toggleClass("fa-chevron-down fa-chevron-up");\u000a            });\u000a        };\u000a\u000a        self.getAdditionalData = function(data) {\u000a            var output = "";\u000a            if (data["gcodeAnalysis"]) {\u000a                if (data["gcodeAnalysis"]["dimensions"]) {\u000a                    var dimensions = data["gcodeAnalysis"]["dimensions"];\u000a                    output += gettext("Model size") + ": " + _.sprintf("%(width).2fmm &times; %(depth).2fmm &times; %(height).2fmm", dimensions);\u000a                    output += "<br>";\u000a                }\u000a                if (data["gcodeAnalysis"]["filament"] && typeof(data["gcodeAnalysis"]["filament"]) === "object") {\u000a                    var filament = data["gcodeAnalysis"]["filament"];\u000a                    if (_.keys(filament).length === 1) {\u000a                        output += gettext("Filament") + ": " + formatFilament(data["gcodeAnalysis"]["filament"]["tool" + 0]) + "<br>";\u000a                    } else if (_.keys(filament).length > 1) {\u000a                        _.each(filament, function(f, k) {\u000a                            if (!_.startsWith(k, "tool") || !f || !f.hasOwnProperty("length") || f["length"] <= 0) return;\u000a                            output += gettext("Filament") + " (" + gettext("Tool") + " " + k.substr("tool".length)\u000a                                + "): " + formatFilament(f) + "<br>";\u000a                        });\u000a                    }\u000a                }\u000a                output += gettext("Estimated print time") + ": " + (self.settingsViewModel.appearance_fuzzyTimes() ? formatFuzzyPrintTime(data["gcodeAnalysis"]["estimatedPrintTime"]) : formatDuration(data["gcodeAnalysis"]["estimatedPrintTime"])) + "<br>";\u000a            }\u000a            if (data["prints"] && data["prints"]["last"]) {\u000a                output += gettext("Last printed") + ": " + formatTimeAgo(data["prints"]["last"]["date"]) + "<br>";\u000a                if (data["prints"]["last"]["printTime"]) {\u000a                    output += gettext("Last print time") + ": " + formatDuration(data["prints"]["last"]["printTime"]);\u000a                }\u000a            }\u000a            return output;\u000a        };\u000a\u000a        self.evaluatePrintDimensions = function(data, notify) {\u000a            if (!self.settingsViewModel.feature_modelSizeDetection()) {\u000a                return true;\u000a            }\u000a\u000a            var analysis = data["gcodeAnalysis"];\u000a            if (!analysis) {\u000a                return true;\u000a            }\u000a\u000a            var printingArea = data["gcodeAnalysis"]["printingArea"];\u000a            if (!printingArea) {\u000a                return true;\u000a            }\u000a\u000a            var printerProfile = self.printerProfiles.currentProfileData();\u000a            if (!printerProfile) {\u000a                return true;\u000a            }\u000a\u000a            var volumeInfo = printerProfile.volume;\u000a            if (!volumeInfo) {\u000a                return true;\u000a            }\u000a\u000a            // set print volume boundaries\u000a            var boundaries;\u000a            if (_.isPlainObject(volumeInfo.custom_box)) {\u000a                boundaries = {\u000a                    minX : volumeInfo.custom_box.x_min(),\u000a                    minY : volumeInfo.custom_box.y_min(),\u000a                    minZ : volumeInfo.custom_box.z_min(),\u000a                    maxX : volumeInfo.custom_box.x_max(),\u000a                    maxY : volumeInfo.custom_box.y_max(),\u000a                    maxZ : volumeInfo.custom_box.z_max()\u000a                }\u000a            } else {\u000a                boundaries = {\u000a                    minX : 0,\u000a                    maxX : volumeInfo.width(),\u000a                    minY : 0,\u000a                    maxY : volumeInfo.depth(),\u000a                    minZ : 0,\u000a                    maxZ : volumeInfo.height()\u000a                };\u000a                if (volumeInfo.origin() === "center") {\u000a                    boundaries["maxX"] = volumeInfo.width() / 2;\u000a                    boundaries["minX"] = -1 * boundaries["maxX"];\u000a                    boundaries["maxY"] = volumeInfo.depth() / 2;\u000a                    boundaries["minY"] = -1 * boundaries["maxY"];\u000a                }\u000a            }\u000a\u000a            // model not within bounds, we need to prepare a warning\u000a            var warning = "<p>" + _.sprintf(gettext("Object in %(name)s exceeds the print volume of the currently selected printer profile, be careful when printing this."), data) + "</p>";\u000a            var info = "";\u000a\u000a            var formatData = {\u000a                profile: boundaries,\u000a                object: printingArea\u000a            };\u000a\u000a            // find exceeded dimensions\u000a            if (printingArea["minX"] < boundaries["minX"] || printingArea["maxX"] > boundaries["maxX"]) {\u000a                info += gettext("Object exceeds print volume in width.<br>");\u000a            }\u000a            if (printingArea["minY"] < boundaries["minY"] || printingArea["maxY"] > boundaries["maxY"]) {\u000a                info += gettext("Object exceeds print volume in depth.<br>");\u000a            }\u000a            if (printingArea["minZ"] < boundaries["minZ"] || printingArea["maxZ"] > boundaries["maxZ"]) {\u000a                info += gettext("Object exceeds print volume in height.<br>");\u000a            }\u000a\u000a            //warn user\u000a            if (info !== "") {\u000a                if (notify) {\u000a                    info += _.sprintf(gettext("Object's bounding box: (%(object.minX).2f, %(object.minY).2f, %(object.minZ).2f) &times; (%(object.maxX).2f, %(object.maxY).2f, %(object.maxZ).2f)"), formatData);\u000a                    info += "<br>";\u000a                    info += _.sprintf(gettext("Print volume: (%(profile.minX).2f, %(profile.minY).2f, %(profile.minZ).2f) &times; (%(profile.maxX).2f, %(profile.maxY).2f, %(profile.maxZ).2f)"), formatData);\u000a\u000a                    warning += pnotifyAdditionalInfo(info);\u000a\u000a                    warning += "<p><small>You can disable this check via Settings &gt; Features &gt; \u005c"Enable model size detection [...]\u005c"</small></p>";\u000a\u000a                    new PNotify({\u000a                        title: gettext("Object doesn't fit print volume"),\u000a                        text: warning,\u000a                        type: "warning",\u000a                        hide: false\u000a                    });\u000a                }\u000a                return false;\u000a            } else {\u000a                return true;\u000a            }\u000a        };\u000a\u000a        self.clearSearchQuery = function() {\u000a            self.searchQuery("");\u000a        };\u000a\u000a        self.performSearch = function(e) {\u000a            var query = self.searchQuery();\u000a            if (query !== undefined && query.trim() !== "") {\u000a                query = query.toLocaleLowerCase();\u000a\u000a                var recursiveSearch = function(entry) {\u000a                    if (entry === undefined) {\u000a                        return false;\u000a                    }\u000a\u000a                    var success = entry["name"].toLocaleLowerCase().indexOf(query) > -1;\u000a                    if (!success && entry["type"] === "folder" && entry["children"]) {\u000a                        return _.any(entry["children"], recursiveSearch);\u000a                    }\u000a\u000a                    return success;\u000a                };\u000a\u000a                self.listHelper.changeSearchFunction(recursiveSearch);\u000a            } else {\u000a                self.listHelper.resetSearch();\u000a            }\u000a\u000a            return false;\u000a        };\u000a\u000a        self.elementByPath = function(path, root) {\u000a            root = root || {children: self.allItems()};\u000a\u000a            var recursiveSearch = function(location, element) {\u000a                if (location.length === 0) {\u000a                    return element;\u000a                }\u000a\u000a                if (!element.hasOwnProperty("children")) {\u000a                    return undefined;\u000a                }\u000a\u000a                var name = location.shift();\u000a                for (var i = 0; i < element.children.length; i++) {\u000a                    if (name === element.children[i].name) {\u000a                        return recursiveSearch(location, element.children[i]);\u000a                    }\u000a                }\u000a\u000a                return undefined;\u000a            };\u000a\u000a            return recursiveSearch(path.split("/"), root);\u000a        };\u000a\u000a        self.onUserLoggedIn = function(user) {\u000a            self.uploadButton.fileupload("enable");\u000a            if (self.uploadSdButton) {\u000a                self.uploadSdButton.fileupload("enable");\u000a            }\u000a        };\u000a\u000a        self.onUserLoggedOut = function() {\u000a            self.uploadButton.fileupload("disable");\u000a            if (self.uploadSdButton) {\u000a                self.uploadSdButton.fileupload("disable");\u000a            }\u000a        };\u000a\u000a        self.onStartup = function() {\u000a            $(".accordion-toggle[data-target='#files']").click(function() {\u000a                var files = $("#files");\u000a                if (files.hasClass("in")) {\u000a                    files.removeClass("overflow_visible");\u000a                    self.filesListVisible(false);\u000a                } else {\u000a                    setTimeout(function() {\u000a                        files.addClass("overflow_visible");\u000a                        self.filesListVisible(true);\u000a                    }, 100);\u000a                }\u000a            });\u000a\u000a            self.listElement = $("#files").find(".scroll-wrapper");\u000a\u000a            self.addFolderDialog = $("#add_folder_dialog");\u000a            self.addFolderDialog.on("shown", function() {\u000a                $("input", self.addFolderDialog).focus();\u000a            });\u000a            $("form", self.addFolderDialog).on("submit", function(e) {\u000a                e.preventDefault();\u000a                if (self.enableAddFolder()) {\u000a                    self.addFolder();\u000a                }\u000a            });\u000a\u000a            //~~ Gcode upload\u000a\u000a            self.uploadButton = $("#gcode_upload");\u000a            self.uploadSdButton = $("#gcode_upload_sd");\u000a            if (!self.uploadSdButton.length) {\u000a                self.uploadSdButton = undefined;\u000a            }\u000a\u000a            self.uploadProgress = $("#gcode_upload_progress");\u000a            self.uploadProgressBar = $(".bar", self.uploadProgress);\u000a\u000a            self.dropOverlay = $("#drop_overlay");\u000a            self.dropZone = $("#drop");\u000a            self.dropZoneLocal = $("#drop_locally");\u000a            self.dropZoneSd = $("#drop_sd");\u000a            self.dropZoneBackground = $("#drop_background");\u000a            self.dropZoneLocalBackground = $("#drop_locally_background");\u000a            self.dropZoneSdBackground = $("#drop_sd_background");\u000a\u000a            if (CONFIG_SD_SUPPORT) {\u000a                self.localTarget = self.dropZoneLocal;\u000a            } else {\u000a                self.localTarget = self.dropZone;\u000a                self.listHelper.removeFilter('sd');\u000a            }\u000a            self.sdTarget = self.dropZoneSd;\u000a\u000a            self.dropOverlay.on('drop', self._forceEndDragNDrop);\u000a\u000a            function evaluateDropzones() {\u000a                var enableLocal = self.loginState.isUser();\u000a                var enableSd = enableLocal && CONFIG_SD_SUPPORT && self.printerState.isSdReady() && !self.isPrinting();\u000a\u000a                self._setDropzone("local", enableLocal);\u000a                self._setDropzone("sdcard", enableSd);\u000a            }\u000a            self.loginState.isUser.subscribe(evaluateDropzones);\u000a            self.printerState.isSdReady.subscribe(evaluateDropzones);\u000a            self.isPrinting.subscribe(evaluateDropzones);\u000a            evaluateDropzones();\u000a\u000a            self.requestData();\u000a        };\u000a\u000a        self.onEventUpdatedFiles = function(payload) {\u000a            if (self.ignoreUpdatedFilesEvent) {\u000a                return;\u000a            }\u000a\u000a            if (payload.type !== "printables") {\u000a                return;\u000a            }\u000a\u000a            self.requestData();\u000a        };\u000a\u000a        self.onEventSlicingStarted = function(payload) {\u000a            self.uploadProgress\u000a                .addClass("progress-striped")\u000a                .addClass("active");\u000a            self.uploadProgressBar.css("width", "100%");\u000a            if (payload.progressAvailable) {\u000a                self.uploadProgressText(_.sprintf(gettext("Slicing ... (%(percentage)d%%)"), {percentage: 0}));\u000a            } else {\u000a                self.uploadProgressText(gettext("Slicing ..."));\u000a            }\u000a        };\u000a\u000a        self.onSlicingProgress = function(slicer, modelPath, machinecodePath, progress) {\u000a            self.uploadProgressText(_.sprintf(gettext("Slicing ... (%(percentage)d%%)"), {percentage: Math.round(progress)}));\u000a        };\u000a\u000a        self.onEventSlicingCancelled = function(payload) {\u000a            self.uploadProgress\u000a                .removeClass("progress-striped")\u000a                .removeClass("active");\u000a            self.uploadProgressBar\u000a                .css("width", "0%");\u000a            self.uploadProgressText("");\u000a        };\u000a\u000a        self.onEventSlicingDone = function(payload) {\u000a            self.uploadProgress\u000a                .removeClass("progress-striped")\u000a                .removeClass("active");\u000a            self.uploadProgressBar\u000a                .css("width", "0%");\u000a            self.uploadProgressText("");\u000a\u000a            new PNotify({\u000a                title: gettext("Slicing done"),\u000a                text: _.sprintf(gettext("Sliced %(stl)s to %(gcode)s, took %(time).2f seconds"), payload),\u000a                type: "success"\u000a            });\u000a\u000a            self.requestData();\u000a        };\u000a\u000a        self.onEventSlicingFailed = function(payload) {\u000a            self.uploadProgress\u000a                .removeClass("progress-striped")\u000a                .removeClass("active");\u000a            self.uploadProgressBar\u000a                .css("width", "0%");\u000a            self.uploadProgressText("");\u000a\u000a            var html = _.sprintf(gettext("Could not slice %(stl)s to %(gcode)s: %(reason)s"), payload);\u000a            new PNotify({title: gettext("Slicing failed"), text: html, type: "error", hide: false});\u000a        };\u000a\u000a        self.onEventMetadataAnalysisFinished = function(payload) {\u000a            self.requestData();\u000a        };\u000a\u000a        self.onEventMetadataStatisticsUpdated = function(payload) {\u000a            self.requestData();\u000a        };\u000a\u000a        self.onEventTransferStarted = function(payload) {\u000a            self.uploadProgress\u000a                .addClass("progress-striped")\u000a                .addClass("active");\u000a            self.uploadProgressBar\u000a                .css("width", "100%");\u000a            self.uploadProgressText(gettext("Streaming ..."));\u000a        };\u000a\u000a        self.onEventTransferDone = function(payload) {\u000a            self.uploadProgress\u000a                .removeClass("progress-striped")\u000a                .removeClass("active");\u000a            self.uploadProgressBar\u000a                .css("width", "0");\u000a            self.uploadProgressText("");\u000a\u000a            new PNotify({\u000a                title: gettext("Streaming done"),\u000a                text: _.sprintf(gettext("Streamed %(local)s to %(remote)s on SD, took %(time).2f seconds"), payload),\u000a                type: "success"\u000a            });\u000a\u000a            self.requestData({focus: {location: "sdcard", path: payload.remote}});\u000a        };\u000a\u000a        self.onEventTransferFailed = function(payload) {\u000a            self.uploadProgress\u000a                .removeClass("progress-striped")\u000a                .removeClass("active");\u000a            self.uploadProgressBar\u000a                .css("width", "0");\u000a            self.uploadProgressText("");\u000a\u000a            new PNotify({\u000a                title: gettext("Streaming failed"),\u000a                text: _.sprintf(gettext("Did not finish streaming %(local)s to %(remote)s on SD"), payload),\u000a                type: "error"\u000a            });\u000a\u000a            self.requestData();\u000a        };\u000a\u000a        self.onServerConnect = self.onServerReconnect = function(payload) {\u000a            self._enableDragNDrop(true);\u000a            self.requestData();\u000a        };\u000a\u000a        self.onServerDisconnect = function(payload) {\u000a            self._enableDragNDrop(false);\u000a        };\u000a\u000a        self._setDropzone = function(dropzone, enable) {\u000a            var button = (dropzone === "local") ? self.uploadButton : self.uploadSdButton;\u000a            var drop = (dropzone === "local") ? self.localTarget : self.sdTarget;\u000a            var url = API_BASEURL + "files/" + dropzone;\u000a\u000a            if (button === undefined)\u000a                return;\u000a\u000a            button.fileupload({\u000a                url: url,\u000a                dataType: "json",\u000a                dropZone: enable ? drop : null,\u000a                drop: function(e, data) {\u000a\u000a                },\u000a                submit: self._handleUploadStart,\u000a                done: self._handleUploadDone,\u000a                fail: self._handleUploadFail,\u000a                always: self._handleUploadAlways,\u000a                progressall: self._handleUploadProgress\u000a            }).bind('fileuploadsubmit', function(e, data) {\u000a                if (self.currentPath() !== "")\u000a                    data.formData = { path: self.currentPath() };\u000a            });\u000a        };\u000a\u000a        self._enableDragNDrop = function(enable) {\u000a            if (enable) {\u000a                $(document).bind("dragenter", self._handleDragEnter);\u000a                $(document).bind("dragleave", self._handleDragLeave);\u000a                $(document).bind("dragover", self._handleDragOver);\u000a                log.debug("Enabled drag-n-drop");\u000a            } else {\u000a                $(document).unbind("dragenter", self._handleDragEnter);\u000a                $(document).unbind("dragleave", self._handleDragLeave);\u000a                $(document).unbind("dragover", self._handleDragOver);\u000a                log.debug("Disabled drag-n-drop");\u000a            }\u000a        };\u000a\u000a        self._setProgressBar = function(percentage, text, active) {\u000a            self.uploadProgressBar\u000a                .css("width", percentage + "%");\u000a            self.uploadProgressText(text);\u000a\u000a            if (active) {\u000a                self.uploadProgress\u000a                    .addClass("progress-striped active");\u000a            } else {\u000a                self.uploadProgress\u000a                    .removeClass("progress-striped active");\u000a            }\u000a        };\u000a\u000a        self._handleUploadStart = function(e, data) {\u000a            self.ignoreUpdatedFilesEvent = true;\u000a            return true;\u000a        };\u000a\u000a        self._handleUploadDone = function(e, data) {\u000a            var focus = undefined;\u000a            if (data.result.files.hasOwnProperty("sdcard")) {\u000a                focus = {location: "sdcard", path: data.result.files.sdcard.path};\u000a            } else if (data.result.files.hasOwnProperty("local")) {\u000a                focus = {location: "local", path: data.result.files.local.path};\u000a            }\u000a            self.requestData({focus: focus})\u000a                .done(function() {\u000a                    if (data.result.done) {\u000a                        self._setProgressBar(0, "", false);\u000a                    }\u000a                });\u000a\u000a            if (focus && _.endsWith(focus.path.toLowerCase(), ".stl")) {\u000a                self.slicing.show(focus.location, focus.path);\u000a            }\u000a        };\u000a\u000a        self._handleUploadFail = function(e, data) {\u000a            var extensions = _.map(SUPPORTED_EXTENSIONS, function(extension) {\u000a                return extension.toLowerCase();\u000a            }).sort();\u000a            extensions = extensions.join(", ");\u000a            var error = "<p>"\u000a                + _.sprintf(gettext("Could not upload the file. Make sure that it is a readable, valid file with one of these extensions: %(extensions)s"),\u000a                            {extensions: extensions})\u000a                + "</p>";\u000a            if (data.jqXHR.responseText) {\u000a                error += pnotifyAdditionalInfo("<pre>" + data.jqXHR.responseText + "</pre>");\u000a            }\u000a            new PNotify({\u000a                title: "Upload failed",\u000a                text: error,\u000a                type: "error",\u000a                hide: false\u000a            });\u000a            self._setProgressBar(0, "", false);\u000a        };\u000a\u000a        self._handleUploadAlways = function(e, data) {\u000a            self.ignoreUpdatedFilesEvent = false;\u000a        };\u000a\u000a        self._handleUploadProgress = function(e, data) {\u000a            var progress = parseInt(data.loaded / data.total * 100, 10);\u000a            var uploaded = progress >= 100;\u000a\u000a            self._setProgressBar(progress, uploaded ? gettext("Saving ...") : gettext("Uploading ..."), uploaded);\u000a        };\u000a\u000a        self._dragNDropTarget = null;\u000a        self._dragNDropFFTimeout = undefined;\u000a        self._dragNDropFFTimeoutDelay = 100;\u000a        self._forceEndDragNDrop = function () {\u000a            self.dropOverlay.removeClass("in");\u000a            if (self.dropZoneLocal) self.dropZoneLocalBackground.removeClass("hover");\u000a            if (self.dropZoneSd) self.dropZoneSdBackground.removeClass("hover");\u000a            if (self.dropZone) self.dropZoneBackground.removeClass("hover");\u000a            self._dragNDropTarget = null;\u000a        };\u000a\u000a        self._handleDragLeave = function (e) {\u000a            if (e.target !== self._dragNDropTarget) return;\u000a            self._forceEndDragNDrop();\u000a        };\u000a\u000a        self._handleDragOver = function(e) {\u000a            // Workaround for Firefox\u000a            //\u000a            // Due to a browser bug (https://bugzilla.mozilla.org/show_bug.cgi?id=656164),\u000a            // if you drag a file out of the window no drag leave event will be fired. So on Firefox we check if\u000a            // our last dragover event was within a timeout. If not, we assume that's because the mouse\u000a            // cursor left the browser window and force a drag stop.\u000a            //\u000a            // Since Firefox keeps on triggering dragover events even if the mouse is not moved while over the\u000a            // browser window, this should work without side effects (e.g. the overlay should stay even if the user\u000a            // keeps the mouse perfectly still).\u000a            //\u000a            // See #2166\u000a            if (!OctoPrint.coreui.browser.firefox) return;\u000a            if (e.target !== self._dragNDropTarget) return;\u000a\u000a            if (self._dragNDropFFTimeout !== undefined) {\u000a                window.clearTimeout(self._dragNDropFFTimeout);\u000a                self._dragNDropFFTimeout = undefined;\u000a            }\u000a\u000a            self._dragNDropFFTimeout = window.setTimeout(function() {\u000a                self._forceEndDragNDrop();\u000a                self._dragNDropFFTimeout = undefined;\u000a            }, self._dragNDropFFTimeoutDelay);\u000a        };\u000a\u000a        self._handleDragEnter = function (e) {\u000a            self.dropOverlay.addClass('in');\u000a\u000a            var foundLocal = false;\u000a            var foundSd = false;\u000a            var found = false;\u000a            var node = e.target;\u000a            do {\u000a                if (self.dropZoneLocal && node === self.dropZoneLocal[0]) {\u000a                    foundLocal = true;\u000a                    break;\u000a                } else if (self.dropZoneSd && node === self.dropZoneSd[0]) {\u000a                    foundSd = true;\u000a                    break;\u000a                } else if (self.dropZone && node === self.dropZone[0]) {\u000a                    found = true;\u000a                    break;\u000a                }\u000a                node = node.parentNode;\u000a            } while (node !== null);\u000a\u000a            if (foundLocal) {\u000a                self.dropZoneLocalBackground.addClass("hover");\u000a                self.dropZoneSdBackground.removeClass("hover");\u000a            } else if (foundSd && self.printerState.isSdReady() && !self.isPrinting()) {\u000a                self.dropZoneSdBackground.addClass("hover");\u000a                self.dropZoneLocalBackground.removeClass("hover");\u000a            } else if (found) {\u000a                self.dropZoneBackground.addClass("hover");\u000a            } else {\u000a                if (self.dropZoneLocalBackground) self.dropZoneLocalBackground.removeClass("hover");\u000a                if (self.dropZoneSdBackground) self.dropZoneSdBackground.removeClass("hover");\u000a                if (self.dropZoneBackground) self.dropZoneBackground.removeClass("hover");\u000a            }\u000a            self._dragNDropTarget = e.target;\u000a            self._dragNDropLastOver = Date.now();\u000a        }\u000a    }\u000a\u000a    OCTOPRINT_VIEWMODELS.push({\u000a        construct: FilesViewModel,\u000a        name: "filesViewModel",\u000a        additionalNames: ["gcodeFilesViewModel"],\u000a        dependencies: ["settingsViewModel", "loginStateViewModel", "printerStateViewModel", "slicingViewModel", "printerProfilesViewModel"],\u000a        elements: ["#files_wrapper", "#add_folder_dialog"]\u000a    });\u000a});\u000a\u000a;\u000a
p0
.