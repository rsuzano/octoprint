V// source: plugin/customControl/js/customControlDialog.js\u000a\ufeff$(function () {\u000a    function customControlDialogViewModel(parameters) {\u000a        var self = this;\u000a\u000a        self.element = ko.observable();\u000a\u000a        self.title = ko.observable(gettext("Create Container"));\u000a        self.type = ko.observable("container");\u000a\u000a        self.useInputs = ko.observable(false);\u000a        self.useConfirm = ko.observable(false);\u000a        self.useOutput = ko.observable(false);\u000a        self.useJavaScript = ko.observable(false);\u000a        self.useEnabled = ko.observable(false);\u000a\u000a        self.layouts = ko.observableArray([\u000a            { name: gettext("Vertical"), key: "vertical" },\u000a            { name: gettext("Horizontal"), key: "horizontal" },\u000a            { name: gettext("Horizontal grid"), key: "horizontal_grid" }\u000a        ]);\u000a        self.types = ko.observableArray([\u000a            { name: gettext("Container"), key: "container" },\u000a            { name: gettext("Command"), key: "command" },\u000a            { name: gettext("Script"), key: "script" },\u000a            { name: gettext("Output"), key: "output" },\u000a        ]);\u000a\u000a        self.hasSlider = ko.computed(function () {\u000a            if (self.element() == undefined || self.element().input == undefined)\u000a                return false;\u000a\u000a            var inputs = self.element().input()\u000a            for(var i = 0; i < inputs.length; i++)    \u000a            {\u000a                if (inputs[i].hasOwnProperty("slider")) {\u000a                    if (typeof inputs[i].slider == "object")\u000a                        return true;\u000a                }\u000a            }\u000a            return false;\u000a        });\u000a        self.span = function(parameter) {\u000a            return ko.computed(function () {\u000a                if (self.hasSlider())\u000a                    return "span2";\u000a\u000a                switch (parameter) {\u000a                    case "name":\u000a                    case "parameter":\u000a                        return "span4";\u000a                    case "default":\u000a                        return "span3";\u000a                }\u000a\u000a                return "span2";\u000a            });\u000a        }\u000a\u000a        self.reset = function (data) {\u000a            var element = {\u000a                name: undefined,\u000a                collapsed: false,\u000a                commands: "",\u000a                confirm: "",\u000a                defaultValue: "",\u000a                script: "",\u000a                javascript: "",\u000a                enabled: "",\u000a                input: [],\u000a                layout: "vertical",\u000a                regex: "",\u000a                template: "",\u000a                confirm: "",\u000a                width: "2",\u000a                offset: "",\u000a                parent: undefined\u000a            };\u000a\u000a            if (typeof data == "object") {\u000a                element = _.extend(element, data);\u000a\u000a                self.useConfirm(data.hasOwnProperty("confirm"));\u000a                self.useInputs(data.hasOwnProperty("input"));\u000a                self.useOutput(data.hasOwnProperty("template"));\u000a            }\u000a\u000a            self.element(ko.mapping.fromJS(element));\u000a        }\u000a        self.show = function (f) {\u000a            var dialog = $("#customControlDialog");\u000a            var primarybtn = $('div.modal-footer .btn-primary', dialog);\u000a\u000a            primarybtn.unbind('click').bind('click', function (e) {\u000a                var obj = ko.mapping.toJS(self.element());\u000a\u000a                var el = {};\u000a                switch (self.type()) {\u000a                    case "container": {\u000a                        el.name = obj.name;\u000a                        el.layout = obj.layout;\u000a                        el.collapsed = obj.collapsed;\u000a\u000a                        el.children = [];\u000a                        break;\u000a                    }\u000a                    case "command": {\u000a                        el.name = obj.name;\u000a                        if (obj.commands.indexOf('\u005cn') == -1)\u000a                            el.command = obj.commands;\u000a                        else\u000a                            el.commands = obj.commands.split('\u005cn');\u000a\u000a                        if (self.useConfirm()) {\u000a                            el.confirm = obj.confirm;\u000a                        }\u000a\u000a                        if (self.useInputs()) {\u000a                            var attributeToInt = function (obj, key, def) {\u000a                                if (obj.hasOwnProperty(key)) {\u000a                                    var val = obj[key];\u000a                                    if (_.isNumber(val)) {\u000a                                        return val;\u000a                                    }\u000a\u000a                                    var parsedVal = parseInt(val);\u000a                                    if (!isNaN(parsedVal)) {\u000a                                        return parsedVal;\u000a                                    }\u000a                                }\u000a                                return def;\u000a                            };\u000a\u000a                            el.input = [];\u000a                            _.each(obj.input, function (element, index, list) {\u000a                                var input = {\u000a                                    name: element.name,\u000a                                    parameter: element.parameter,\u000a                                    default: element.defaultValue\u000a                                };\u000a                                if (element.hasOwnProperty("slider") && element.slider != false) {\u000a                                    input["slider"] = {\u000a                                    };\u000a\u000a                                    input.default = attributeToInt(element, "defaultValue", undefined);\u000a\u000a                                    if (element.slider.hasOwnProperty("min") && element.slider.min != "")\u000a                                        input.slider.min = element.slider.min;\u000a                                    if (element.slider.hasOwnProperty("max") && element.slider.max != "")\u000a                                        input.slider.max = element.slider.max;\u000a                                    if (element.slider.hasOwnProperty("step") && element.slider.step != "")\u000a                                        input.slider.step = element.slider.step;\u000a                                }\u000a\u000a                                el.input.push(input);\u000a                            });\u000a                        }\u000a\u000a                        if (self.useOutput()) {\u000a                            el.template = obj.template;\u000a                            el.regex = obj.regex;\u000a                            el.default = obj.defaultValue;\u000a                        }\u000a                        break;\u000a                    }\u000a                    case "script":\u000a                        {\u000a                            el.name = obj.name;\u000a                            el.script = obj.script;\u000a\u000a                            if (self.useConfirm()) {\u000a                                el.confirm = obj.confirm;\u000a                            }\u000a\u000a                            if (self.useInputs()) {\u000a                                el.input = [];\u000a                                _.each(obj.input, function (element, index, list) {\u000a                                    var input = {\u000a                                        name: element.name,\u000a                                        parameter: element.parameter,\u000a                                        defaultValue: !isNaN(element.defaultValue) ? element.defaultValue : undefined\u000a                                    };\u000a                                    if (element.hasOwnProperty("slider") && element.slider != false) {\u000a                                        input["slider"] = {\u000a                                        };\u000a\u000a                                        input.defaultValue = !isNaN(element.defaultValue) && element.defaultValue != undefined && element.defaultValue != "" ? parseInt(element.defaultValue) : undefined;\u000a\u000a                                        if (element.slider.min != "")\u000a                                            input.slider.min = parseInt(element.slider.min);\u000a                                        if (element.slider.max != "")\u000a                                            input.slider.max = parseInt(element.slider.max);\u000a                                        if (element.slider.step != "")\u000a                                            input.slider.step = parseInt(element.slider.step);\u000a                                    }\u000a\u000a                                    el.input.push(input);\u000a                                });\u000a                            }\u000a                            break;\u000a                        }\u000a                    case "output": {\u000a                        el.template = obj.template;\u000a                        el.regex = obj.regex;\u000a                        el.defaultValue = obj.defaultValue;\u000a                        break;\u000a                    }\u000a                }\u000a\u000a                el.width = obj.width;\u000a                el.offset = obj.offset;\u000a\u000a                f(el);\u000a            });\u000a\u000a            dialog.modal({\u000a                show: 'true',\u000a                backdrop: 'static',\u000a                keyboard: false\u000a            });\u000a        }\u000a\u000a        self.removeInput = function (data) {\u000a            self.element().input.remove(data);\u000a        }\u000a        self.addInput = function () {\u000a            var obj = {\u000a                name: ko.observable(""),\u000a                parameter: ko.observable(""),\u000a                defaultValue: ko.observable(""),\u000a                slider: false\u000a            }\u000a\u000a            self.element().input.push(obj);\u000a        }\u000a        self.addSliderInput = function () {\u000a            var obj = {\u000a                name: ko.observable(""),\u000a                parameter: ko.observable(""),\u000a                defaultValue: ko.observable(),\u000a                slider: {\u000a                    min: ko.observable(),\u000a                    max: ko.observable(),\u000a                    step: ko.observable()\u000a                }\u000a            }\u000a\u000a            self.element().input.push(obj);\u000a        }\u000a    }\u000a\u000a    // view model class, parameters for constructor, container to bind to\u000a    OCTOPRINT_VIEWMODELS.push([\u000a        customControlDialogViewModel,\u000a        [],\u000a        "#customControlDialog"\u000a    ]);\u000a});\u000a;\u000a
p0
.