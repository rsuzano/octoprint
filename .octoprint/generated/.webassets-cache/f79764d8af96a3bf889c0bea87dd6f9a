V// source: plugin/backup/js/backup.js\u000a$(function() {\u000a    function BackupViewModel(parameters) {\u000a        var self = this;\u000a\u000a        self.loginState = parameters[0];\u000a        self.settings = parameters[1];\u000a\u000a        self.backups = new ItemListHelper(\u000a            "plugin.backup.backups",\u000a            {\u000a                "date": function (a, b) {\u000a                    // sorts descending\u000a                    if (a["date"] > b["date"]) return -1;\u000a                    if (a["date"] < b["date"]) return 1;\u000a                    return 0;\u000a                }\u000a            },\u000a            {\u000a            },\u000a            "date",\u000a            [],\u000a            [],\u000a            10\u000a        );\u000a\u000a        self.markedForBackupDeletion = ko.observableArray([]);\u000a\u000a        self.excludeFromBackup = ko.observableArray([]);\u000a        self.backupInProgress = ko.observable(false);\u000a        self.restoreSupported = ko.observable(true);\u000a\u000a        self.backupUploadButton = $("#settings-backup-upload");\u000a        self.backupUploadData = undefined;\u000a        self.backupUploadButton.fileupload({\u000a            dataType: "json",\u000a            maxNumberOfFiles: 1,\u000a            autoUpload: false,\u000a            headers: OctoPrint.getRequestHeaders(),\u000a            add: function(e, data) {\u000a                if (data.files.length === 0) {\u000a                    // no files? ignore\u000a                    return false;\u000a                }\u000a\u000a                self.backupUploadName(data.files[0].name);\u000a                self.backupUploadData = data;\u000a            },\u000a            done: function(e, data) {\u000a                self.backupUploadName(undefined);\u000a                self.backupUploadData = undefined;\u000a            }\u000a        });\u000a        self.backupUploadName = ko.observable();\u000a        self.restoreInProgress = ko.observable(false);\u000a        self.restoreTitle = ko.observable();\u000a        self.restoreDialog = undefined;\u000a        self.restoreOutput = undefined;\u000a        self.unknownPlugins = ko.observableArray([]);\u000a\u000a        self.loglines = ko.observableArray([]);\u000a\u000a        self.requestData = function() {\u000a            OctoPrint.plugins.backup.get()\u000a                .done(self.fromResponse);\u000a        };\u000a\u000a        self.fromResponse = function(response) {\u000a            self.backups.updateItems(response.backups);\u000a            self.unknownPlugins(response.unknown_plugins);\u000a            self.restoreSupported(response.restore_supported);\u000a        };\u000a\u000a        self.createBackup = function() {\u000a            var excluded = self.excludeFromBackup();\u000a            OctoPrint.plugins.backup.createBackup(excluded)\u000a                .done(function() {\u000a                    self.excludeFromBackup([]);\u000a                })\u000a        };\u000a\u000a        self.removeBackup = function(backup) {\u000a            var perform = function() {\u000a                OctoPrint.plugins.backup.deleteBackup(backup)\u000a                    .done(function() {\u000a                        self.requestData();\u000a                    });\u000a            };\u000a            showConfirmationDialog(_.sprintf(gettext("You are about to delete backup file \u005c"%(name)s\u005c"."), {name: backup}),\u000a                perform);\u000a        };\u000a\u000a        self.restoreBackup = function(backup) {\u000a            if (!self.restoreSupported()) return;\u000a\u000a            var perform = function() {\u000a                self.restoreInProgress(true);\u000a                self.loglines.removeAll();\u000a                self.loglines.push({line: "Preparing to restore...", stream: "message"});\u000a                self.loglines.push({line: " ", stream: "message"});\u000a                self.restoreDialog.modal({keyboard: false, backdrop: "static", show: true});\u000a\u000a                OctoPrint.plugins.backup.restoreBackup(backup);\u000a            };\u000a            showConfirmationDialog(_.sprintf(gettext("You are about to restore the backup file \u005c"%(name)s\u005c". This cannot be undone."), {name: backup}),\u000a                perform);\u000a        };\u000a\u000a        self.performRestoreFromUpload = function() {\u000a            if (self.backupUploadData === undefined) return;\u000a\u000a            var perform = function() {\u000a                self.restoreInProgress(true);\u000a                self.loglines.removeAll();\u000a                self.loglines.push({line: "Uploading backup, this can take a while. Please wait...", stream: "message"});\u000a                self.loglines.push({line: " ", stream: "message"});\u000a                self.restoreDialog.modal({keyboard: false, backdrop: "static", show: true});\u000a\u000a                self.backupUploadData.submit();\u000a            };\u000a            showConfirmationDialog(_.sprintf(gettext("You are about to upload and restore the backup file \u005c"%(name)s\u005c". This cannot be undone."), {name: self.backupUploadName()}),\u000a                perform);\u000a        };\u000a\u000a        self.deleteUnknownPluginRecord = function() {\u000a            var perform = function() {\u000a                OctoPrint.plugins.backup.deleteUnknownPlugins()\u000a                    .done(function() {\u000a                        self.requestData();\u000a                    });\u000a            };\u000a            showConfirmationDialog(gettext("You are about to delete the record of plugins unknown during the last restore."),\u000a                perform);\u000a        };\u000a\u000a        self.markFilesOnPage = function() {\u000a            self.markedForBackupDeletion(_.uniq(self.markedForBackupDeletion().concat(_.map(self.backups.paginatedItems(), "name"))));\u000a        };\u000a\u000a        self.markAllFiles = function() {\u000a            self.markedForBackupDeletion(_.map(self.backups.allItems, "name"));\u000a        };\u000a\u000a        self.clearMarkedFiles = function() {\u000a            self.markedForBackupDeletion.removeAll();\u000a        };\u000a\u000a        self.removeMarkedFiles = function() {\u000a            var perform = function() {\u000a                self._bulkRemove(self.markedForBackupDeletion())\u000a                    .done(function() {\u000a                        self.markedForBackupDeletion.removeAll();\u000a                    });\u000a            };\u000a\u000a            showConfirmationDialog(_.sprintf(gettext("You are about to delete %(count)d backups."), {count: self.markedForBackupDeletion().length}),\u000a                                   perform);\u000a        };\u000a\u000a        self.onStartup = function() {\u000a            self.restoreDialog = $("#settings_plugin_backup_restoredialog");\u000a            self.restoreOutput = $("#settings_plugin_backup_restoredialog_output");\u000a        };\u000a\u000a        self.onSettingsShown = function() {\u000a            self.requestData();\u000a        };\u000a\u000a        self.onDataUpdaterPluginMessage = function(plugin, data) {\u000a            if (plugin !== "backup") return;\u000a\u000a            if (data.type === "backup_done") {\u000a                self.requestData();\u000a                self.backupInProgress(false);\u000a                new PNotify({\u000a                    title: gettext("Backup created successfully"),\u000a                    type: "success"\u000a                });\u000a            } else if (data.type === "backup_started") {\u000a                self.backupInProgress(true);\u000a            } else if (data.type === "backup_error") {\u000a                self.requestData();\u000a                self.backupInProgress(false);\u000a                new PNotify({\u000a                    title: gettext("Creating the backup failed"),\u000a                    text: _.sprintf(gettext("OctoPrint could not create your backup. Please consult <code>octoprint.log</code> for details. Error: %(error)s"), {error:data.error}),\u000a                    type: "error",\u000a                    hide: false\u000a                });\u000a            } else if (data.type === "restore_started") {\u000a                self.loglines.push({line: gettext("Restoring from backup..."), stream: "message"});\u000a                self.loglines.push({line: " ", stream: "message"});\u000a            } else if (data.type === "restore_failed") {\u000a                self.loglines.push({line: " ", stream: "message"});\u000a                self.loglines.push({line: gettext("Restore failed! Check the above output and octoprint.log for reasons as to why."), stream: "error"});\u000a                self.restoreInProgress(false);\u000a            } else if (data.type === "restore_done") {\u000a                self.loglines.push({line: " ", stream: "message"});\u000a                self.loglines.push({line: gettext("Restore successful! The server will now be restarted!"), stream: "message"});\u000a                self.restoreInProgress(false);\u000a            } else if (data.type === "installing_plugin") {\u000a                self.loglines.push({line: " ", stream: "message"});\u000a                self.loglines.push({\u000a                    line: _.sprintf(gettext("Installing plugin \u005c"%(plugin)s\u005c"..."), {plugin: data.plugin}),\u000a                    stream: "message"\u000a                });\u000a            } else if (data.type === "plugin_incompatible") {\u000a                self.loglines.push({line: " ", stream: "message"});\u000a                self.loglines.push({\u000a                    line: _.sprintf(gettext("Cannot install plugin \u005c"%(plugin)s\u005c" due to it being incompatible to this OctoPrint version and/or underlying operating system"), {plugin: data.plugin.key}),\u000a                    stream: "stderr"\u000a                });\u000a            } else if (data.type === "unknown_plugins") {\u000a                if (data.plugins.length > 0) {\u000a                    self.loglines.push({line: " ", stream: "message"});\u000a                    self.loglines.push({line: _.sprintf(gettext("There are %(count)d plugins you'll need to install manually since they aren't registered on the repository:"), {count: data.plugins.length}), stream: "message"});\u000a                    _.each(data.plugins, function(plugin) {\u000a                        self.loglines.push({line: plugin.name + ": " + plugin.url, stream: "message"});\u000a                    });\u000a                    self.loglines.push({line: " ", stream: "message"});\u000a                    self.unknownPlugins(data.plugins);\u000a                }\u000a            } else if (data.type === "logline") {\u000a                self.loglines.push(self._preprocessLine({line: data.line, stream: data.stream}));\u000a                self._scrollRestoreOutputToEnd();\u000a            }\u000a        };\u000a\u000a        self._scrollRestoreOutputToEnd = function() {\u000a            self.restoreOutput.scrollTop(self.restoreOutput[0].scrollHeight - self.restoreOutput.height());\u000a        };\u000a\u000a        self._forcedStdoutLine = /You are using pip version .*?, however version .*? is available\u005c.|You should consider upgrading via the '.*?' command\u005c./;\u000a        self._preprocessLine = function(line) {\u000a            if (line.stream === "stderr" && line.line.match(self._forcedStdoutLine)) {\u000a                line.stream = "stdout";\u000a            }\u000a            return line;\u000a        };\u000a\u000a        self._bulkRemove = function(files) {\u000a            var title, message, handler;\u000a\u000a            title = gettext("Deleting backups");\u000a            message = _.sprintf(gettext("Deleting %(count)d backups..."), {count: files.length});\u000a            handler = function(filename) {\u000a                return OctoPrint.plugins.backup.deleteBackup(filename)\u000a                    .done(function() {\u000a                        deferred.notify(_.sprintf(gettext("Deleted %(filename)s..."), {filename: filename}), true);\u000a                    })\u000a                    .fail(function(jqXHR) {\u000a                        var short = _.sprintf(gettext("Deletion of %(filename)s failed, continuing..."), {filename: filename});\u000a                        var long = _.sprintf(gettext("Deletion of %(filename)s failed: %(error)s"), {filename: filename, error: jqXHR.responseText});\u000a                        deferred.notify(short, long, false);\u000a                    });\u000a            };\u000a\u000a            var deferred = $.Deferred();\u000a\u000a            var promise = deferred.promise();\u000a\u000a            var options = {\u000a                title: title,\u000a                message: message,\u000a                max: files.length,\u000a                output: true\u000a            };\u000a            showProgressModal(options, promise);\u000a\u000a            var requests = [];\u000a            _.each(files, function(filename) {\u000a                var request = handler(filename);\u000a                requests.push(request)\u000a            });\u000a            $.when.apply($, _.map(requests, wrapPromiseWithAlways))\u000a                .done(function() {\u000a                    deferred.resolve();\u000a                    self.requestData();\u000a                });\u000a\u000a            return promise;\u000a        };\u000a    }\u000a\u000a    OCTOPRINT_VIEWMODELS.push({\u000a        construct: BackupViewModel,\u000a        dependencies: ["loginStateViewModel", "settingsViewModel"],\u000a        elements: ["#settings_plugin_backup"]\u000a    });\u000a});\u000a\u000a;\u000a
p0
.